

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu May 19 15:17:19 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataCOMRAM
    39  001324                     __pidataCOMRAM:
    40                           	opt stack 0
    41                           
    42                           ;initializer for __pwm
    43  001324  0001               	dw	1
    44  001326  0001               	dw	1
    45  001328  0001               	dw	1
    46  00132A  0001               	dw	1
    47  00132C  0001               	dw	1
    48                           
    49                           ;initializer for PicConfig@F5253
    50  00132E  30                 	db	48
    51  00132F  0D                 	db	13
    52  001330  0A                 	db	10
    53  001331  00                 	db	0
    54                           
    55                           ;initializer for WifiTCPSend@F5114
    56  001332  0D                 	db	13
    57  001333  0A                 	db	10
    58  001334  00                 	db	0
    59                           
    60                           ;initializer for _SerialLen
    61  001335  0032               	dw	50
    62                           
    63                           ;initializer for _WifiTCPDataLen
    64  001337  000F               	dw	15
    65                           
    66                           ;initializer for _freq
    67  001339  0060               	dw	96
    68                           
    69                           	psect	idataBANK0
    70  001362                     __pidataBANK0:
    71                           	opt stack 0
    72                           
    73                           ;initializer for PicConfig@F5251
    74  001362  4F                 	db	79
    75  001363  4B                 	db	75
    76  001364  0D                 	db	13
    77  001365  0A                 	db	10
    78  001366  00                 	db	0
    79                           
    80                           ;initializer for PicConfig@F5255
    81  001367  31                 	db	49
    82  001368  0D                 	db	13
    83  001369  0A                 	db	10
    84  00136A  00                 	db	0
    85                           
    86                           ;initializer for PicConfig@F5257
    87  00136B  30                 	db	48
    88  00136C  0D                 	db	13
    89  00136D  0A                 	db	10
    90  00136E  00                 	db	0
    91                           
    92                           	psect	smallconst
    93  00081C                     __psmallconst:
    94                           	opt stack 0
    95  00081C  00                 	db	0
    96  00081D                     _Oksend:
    97                           	opt stack 0
    98  00081D  4F                 	db	79
    99  00081E  4B                 	db	75
   100  00081F  0D                 	db	13
   101  000820  0A                 	db	10
   102  000821  00                 	db	0
   103  000822                     __end_of_Oksend:
   104                           	opt stack 0
   105  000822                     _sendCmd:
   106                           	opt stack 0
   107  000822  41                 	db	65
   108  000823  54                 	db	84
   109  000824  2B                 	db	43
   110  000825  43                 	db	67
   111  000826  49                 	db	73
   112  000827  50                 	db	80
   113  000828  53                 	db	83
   114  000829  45                 	db	69
   115  00082A  4E                 	db	78
   116  00082B  44                 	db	68
   117  00082C  3D                 	db	61
   118  00082D  30                 	db	48
   119  00082E  2C                 	db	44
   120  00082F  32                 	db	50
   121  000830  32                 	db	50
   122  000831  30                 	db	48
   123  000832  0D                 	db	13
   124  000833  0A                 	db	10
   125  000834  00                 	db	0
   126  000835                     __end_of_sendCmd:
   127                           	opt stack 0
   128  0000                     _ADCON0	set	4034
   129  0000                     _ADCON0bits	set	4034
   130  0000                     _ADCON1	set	4033
   131  0000                     _ADCON1bits	set	4033
   132  0000                     _ADCON2	set	4032
   133  0000                     _ADRESH	set	4036
   134  0000                     _ADRESL	set	4035
   135  0000                     _CCP1CON	set	4029
   136  0000                     _CCPR1L	set	4030
   137  0000                     _INTCON	set	4082
   138  0000                     _INTCONbits	set	4082
   139  0000                     _PIE1bits	set	3997
   140  0000                     _PIR1bits	set	3998
   141  0000                     _PORTA	set	3968
   142  0000                     _PORTB	set	3969
   143  0000                     _PR2	set	4043
   144  0000                     _RCREG	set	4014
   145  0000                     _SPBRG	set	4015
   146  0000                     _SPBRGH	set	4016
   147  0000                     _SSPADD	set	4040
   148  0000                     _SSPCON1	set	4038
   149  0000                     _SSPCON2	set	4037
   150  0000                     _SSPCON2bits	set	4037
   151  0000                     _SSPSTAT	set	4039
   152  0000                     _T0CON	set	4053
   153  0000                     _T2CON	set	4042
   154  0000                     _TMR0L	set	4054
   155  0000                     _TRISA	set	3986
   156  0000                     _TRISB	set	3987
   157  0000                     _TRISBbits	set	3987
   158  0000                     _TRISCbits	set	3988
   159  0000                     _TXREG	set	4013
   160  0000                     _ADDEN	set	32091
   161  0000                     _BRGH	set	32098
   162  0000                     _CREN	set	32092
   163  0000                     _CSRC	set	32103
   164  0000                     _FERR	set	32090
   165  0000                     _OERR	set	32089
   166  0000                     _RCIE	set	31981
   167  0000                     _RCIF	set	31989
   168  0000                     _RX9	set	32094
   169  0000                     _RX9D	set	32088
   170  0000                     _SENDB	set	32099
   171  0000                     _SPEN	set	32095
   172  0000                     _SREN	set	32093
   173  0000                     _SYNC	set	32100
   174  0000                     _TRMT	set	32097
   175  0000                     _TX9	set	32102
   176  0000                     _TX9D	set	32096
   177  0000                     _TXEN	set	32101
   178  0000                     _TXIE	set	31980
   179  0000                     _TXIF	set	31988
   180  000835                     STR_3:
   181  000835  41                 	db	65	;'A'
   182  000836  54                 	db	84	;'T'
   183  000837  2B                 	db	43
   184  000838  43                 	db	67	;'C'
   185  000839  57                 	db	87	;'W'
   186  00083A  4A                 	db	74	;'J'
   187  00083B  41                 	db	65	;'A'
   188  00083C  50                 	db	80	;'P'
   189  00083D  3D                 	db	61	;'='
   190  00083E  22                 	db	34
   191  00083F  74                 	db	116	;'t'
   192  000840  61                 	db	97	;'a'
   193  000841  6C                 	db	108	;'l'
   194  000842  6B                 	db	107	;'k'
   195  000843  69                 	db	105	;'i'
   196  000844  6E                 	db	110	;'n'
   197  000845  67                 	db	103	;'g'
   198  000846  68                 	db	104	;'h'
   199  000847  61                 	db	97	;'a'
   200  000848  6E                 	db	110	;'n'
   201  000849  64                 	db	100	;'d'
   202  00084A  22                 	db	34
   203  00084B  2C                 	db	44
   204  00084C  22                 	db	34
   205  00084D  74                 	db	116	;'t'
   206  00084E  6B                 	db	107	;'k'
   207  00084F  31                 	db	49	;'1'
   208  000850  32                 	db	50	;'2'
   209  000851  33                 	db	51	;'3'
   210  000852  34                 	db	52	;'4'
   211  000853  35                 	db	53	;'5'
   212  000854  36                 	db	54	;'6'
   213  000855  22                 	db	34
   214  000856  0D                 	db	13
   215  000857  0A                 	db	10
   216  000858  00                 	db	0
   217  000859                     STR_5:
   218  000859  41                 	db	65	;'A'
   219  00085A  54                 	db	84	;'T'
   220  00085B  2B                 	db	43
   221  00085C  43                 	db	67	;'C'
   222  00085D  49                 	db	73	;'I'
   223  00085E  50                 	db	80	;'P'
   224  00085F  53                 	db	83	;'S'
   225  000860  45                 	db	69	;'E'
   226  000861  52                 	db	82	;'R'
   227  000862  56                 	db	86	;'V'
   228  000863  45                 	db	69	;'E'
   229  000864  52                 	db	82	;'R'
   230  000865  3D                 	db	61	;'='
   231  000866  31                 	db	49	;'1'
   232  000867  2C                 	db	44
   233  000868  34                 	db	52	;'4'
   234  000869  30                 	db	48	;'0'
   235  00086A  30                 	db	48	;'0'
   236  00086B  30                 	db	48	;'0'
   237  00086C  0D                 	db	13
   238  00086D  0A                 	db	10
   239  00086E  00                 	db	0
   240  00086F                     STR_2:
   241  00086F  41                 	db	65	;'A'
   242  000870  54                 	db	84	;'T'
   243  000871  2B                 	db	43
   244  000872  43                 	db	67	;'C'
   245  000873  57                 	db	87	;'W'
   246  000874  4D                 	db	77	;'M'
   247  000875  4F                 	db	79	;'O'
   248  000876  44                 	db	68	;'D'
   249  000877  45                 	db	69	;'E'
   250  000878  3D                 	db	61	;'='
   251  000879  31                 	db	49	;'1'
   252  00087A  0D                 	db	13
   253  00087B  0A                 	db	10
   254  00087C  00                 	db	0
   255  00087D                     STR_4:
   256  00087D  41                 	db	65	;'A'
   257  00087E  54                 	db	84	;'T'
   258  00087F  2B                 	db	43
   259  000880  43                 	db	67	;'C'
   260  000881  49                 	db	73	;'I'
   261  000882  50                 	db	80	;'P'
   262  000883  4D                 	db	77	;'M'
   263  000884  55                 	db	85	;'U'
   264  000885  58                 	db	88	;'X'
   265  000886  3D                 	db	61	;'='
   266  000887  31                 	db	49	;'1'
   267  000888  0D                 	db	13
   268  000889  0A                 	db	10
   269  00088A  00                 	db	0
   270  00088B  41                 	db	65	;'A'
   271  00088C  54                 	db	84	;'T'
   272  00088D  2B                 	db	43
   273  00088E  43                 	db	67	;'C'
   274  00088F  49                 	db	73	;'I'
   275  000890  50                 	db	80	;'P'
   276  000891  53                 	db	83	;'S'
   277  000892  45                 	db	69	;'E'
   278  000893  4E                 	db	78	;'N'
   279  000894  44                 	db	68	;'D'
   280  000895  3D                 	db	61	;'='
   281  000896  30                 	db	48	;'0'
   282  000897  2C                 	db	44
   283  000898  00                 	db	0
   284  000899  6C                 	db	108	;'l'
   285  00089A  69                 	db	105	;'i'
   286  00089B  6E                 	db	110	;'n'
   287  00089C  6B                 	db	107	;'k'
   288  00089D  20                 	db	32
   289  00089E  69                 	db	105	;'i'
   290  00089F  73                 	db	115	;'s'
   291  0008A0  20                 	db	32
   292  0008A1  6E                 	db	110	;'n'
   293  0008A2  6F                 	db	111	;'o'
   294  0008A3  74                 	db	116	;'t'
   295  0008A4  00                 	db	0
   296  0008A5                     STR_1:
   297  0008A5  41                 	db	65	;'A'
   298  0008A6  54                 	db	84	;'T'
   299  0008A7  2B                 	db	43
   300  0008A8  52                 	db	82	;'R'
   301  0008A9  53                 	db	83	;'S'
   302  0008AA  54                 	db	84	;'T'
   303  0008AB  0D                 	db	13
   304  0008AC  0A                 	db	10
   305  0008AD  00                 	db	0
   306  0008AE  41                 	db	65	;'A'
   307  0008AF  4E                 	db	78	;'N'
   308  0008B0  31                 	db	49	;'1'
   309  0008B1  52                 	db	82	;'R'
   310  0008B2  00                 	db	0
   311  0008B3  52                 	db	82	;'R'
   312  0008B4  41                 	db	65	;'A'
   313  0008B5  30                 	db	48	;'0'
   314  0008B6  57                 	db	87	;'W'
   315  0008B7  00                 	db	0
   316  0008B8  52                 	db	82	;'R'
   317  0008B9  42                 	db	66	;'B'
   318  0008BA  30                 	db	48	;'0'
   319  0008BB  57                 	db	87	;'W'
   320  0008BC  00                 	db	0
   321  0008BD  52                 	db	82	;'R'
   322  0008BE  41                 	db	65	;'A'
   323  0008BF  31                 	db	49	;'1'
   324  0008C0  57                 	db	87	;'W'
   325  0008C1  00                 	db	0
   326  0008C2  52                 	db	82	;'R'
   327  0008C3  41                 	db	65	;'A'
   328  0008C4  32                 	db	50	;'2'
   329  0008C5  57                 	db	87	;'W'
   330  0008C6  00                 	db	0
   331  0008C7  52                 	db	82	;'R'
   332  0008C8  41                 	db	65	;'A'
   333  0008C9  33                 	db	51	;'3'
   334  0008CA  57                 	db	87	;'W'
   335  0008CB  00                 	db	0
   336  0008CC  52                 	db	82	;'R'
   337  0008CD  42                 	db	66	;'B'
   338  0008CE  34                 	db	52	;'4'
   339  0008CF  57                 	db	87	;'W'
   340  0008D0  00                 	db	0
   341  0008D1  52                 	db	82	;'R'
   342  0008D2  42                 	db	66	;'B'
   343  0008D3  35                 	db	53	;'5'
   344  0008D4  57                 	db	87	;'W'
   345  0008D5  00                 	db	0
   346  0008D6  52                 	db	82	;'R'
   347  0008D7  41                 	db	65	;'A'
   348  0008D8  37                 	db	55	;'7'
   349  0008D9  57                 	db	87	;'W'
   350  0008DA  00                 	db	0
   351  0008DB  50                 	db	80	;'P'
   352  0008DC  57                 	db	87	;'W'
   353  0008DD  4D                 	db	77	;'M'
   354  0008DE  00                 	db	0
   355  0008DF  4F                 	db	79	;'O'
   356  0008E0  4B                 	db	75	;'K'
   357  0008E1  00                 	db	0
   358  0000                     
   359                           ; #config settings
   360  0008E2  00                 	db	0	; dummy byte at the end
   361  0000                     
   362                           	psect	cinit
   363  0010AC                     __pcinit:
   364                           	opt stack 0
   365  0010AC                     start_initialization:
   366                           	opt stack 0
   367  0010AC                     __initialization:
   368                           	opt stack 0
   369                           
   370                           ; Clear objects allocated to BANK1 (220 bytes)
   371  0010AC  EE01  F000         	lfsr	0,__pbssBANK1
   372  0010B0  0EDC               	movlw	220
   373  0010B2                     clear_0:
   374  0010B2  6AEE               	clrf	postinc0,c
   375  0010B4  06E8               	decf	wreg,f,c
   376  0010B6  E1FD               	bnz	clear_0
   377                           
   378                           ; Clear objects allocated to BANK0 (123 bytes)
   379  0010B8  EE00  F060         	lfsr	0,__pbssBANK0
   380  0010BC  0E7B               	movlw	123
   381  0010BE                     clear_1:
   382  0010BE  6AEE               	clrf	postinc0,c
   383  0010C0  06E8               	decf	wreg,f,c
   384  0010C2  E1FD               	bnz	clear_1
   385                           
   386                           ; Clear objects allocated to BITCOMRAM (3 bytes)
   387  0010C4  6A39               	clrf	((__pbitbssCOMRAM/(0+8)+2))& (0+255),c
   388  0010C6  6A38               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   389  0010C8  6A37               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   390                           
   391                           ; Clear objects allocated to COMRAM (31 bytes)
   392  0010CA  EE00  F001         	lfsr	0,__pbssCOMRAM
   393  0010CE  0E1F               	movlw	31
   394  0010D0                     clear_2:
   395  0010D0  6AEE               	clrf	postinc0,c
   396  0010D2  06E8               	decf	wreg,f,c
   397  0010D4  E1FD               	bnz	clear_2
   398                           
   399                           ; Initialize objects allocated to BANK0 (13 bytes)
   400                           ; load TBLPTR registers with __pidataBANK0
   401  0010D6  0E62               	movlw	low __pidataBANK0
   402  0010D8  6EF6               	movwf	tblptrl,c
   403  0010DA  0E13               	movlw	high __pidataBANK0
   404  0010DC  6EF7               	movwf	tblptrh,c
   405  0010DE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   406  0010E0  6EF8               	movwf	tblptru,c
   407  0010E2  EE00  F0EB         	lfsr	0,__pdataBANK0
   408  0010E6  EE10 F00D          	lfsr	1,13
   409  0010EA                     copy_data0:
   410  0010EA  0009               	tblrd		*+
   411  0010EC  CFF5 FFEE          	movff	tablat,postinc0
   412  0010F0  50E5               	movf	postdec1,w,c
   413  0010F2  50E1               	movf	fsr1l,w,c
   414  0010F4  E1FA               	bnz	copy_data0
   415                           
   416                           ; Initialize objects allocated to COMRAM (23 bytes)
   417                           ; load TBLPTR registers with __pidataCOMRAM
   418  0010F6  0E24               	movlw	low __pidataCOMRAM
   419  0010F8  6EF6               	movwf	tblptrl,c
   420  0010FA  0E13               	movlw	high __pidataCOMRAM
   421  0010FC  6EF7               	movwf	tblptrh,c
   422  0010FE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   423  001100  6EF8               	movwf	tblptru,c
   424  001102  EE00  F020         	lfsr	0,__pdataCOMRAM
   425  001106  EE10 F017          	lfsr	1,23
   426  00110A                     copy_data1:
   427  00110A  0009               	tblrd		*+
   428  00110C  CFF5 FFEE          	movff	tablat,postinc0
   429  001110  50E5               	movf	postdec1,w,c
   430  001112  50E1               	movf	fsr1l,w,c
   431  001114  E1FA               	bnz	copy_data1
   432  001116                     end_of_initialization:
   433                           	opt stack 0
   434  001116                     __end_of__initialization:
   435                           	opt stack 0
   436  001116  0E00               	movlw	low (__Lmediumconst shr (0+16))
   437  001118  6EF8               	movwf	tblptru,c
   438  00111A  0100               	movlb	0
   439  00111C  EF68  F009         	goto	_main	;jump to C main() function
   440                           tblptru	equ	0xFF8
   441                           tblptrh	equ	0xFF7
   442                           tblptrl	equ	0xFF6
   443                           tablat	equ	0xFF5
   444                           postinc0	equ	0xFEE
   445                           wreg	equ	0xFE8
   446                           postdec1	equ	0xFE5
   447                           fsr1l	equ	0xFE1
   448                           
   449                           	psect	bitbssCOMRAM
   450  0001B8                     __pbitbssCOMRAM:
   451                           	opt stack 0
   452  0001B8                     _A0:
   453                           	opt stack 0
   454  0001B8                     	ds	1
   455  0001B9                     _A1:
   456                           	opt stack 0
   457  0001B9                     	ds	1
   458  0001BA                     _A2:
   459                           	opt stack 0
   460  0001BA                     	ds	1
   461  0001BB                     _A3:
   462                           	opt stack 0
   463  0001BB                     	ds	1
   464  0001BC                     _A4:
   465                           	opt stack 0
   466  0001BC                     	ds	1
   467  0001BD                     _A5:
   468                           	opt stack 0
   469  0001BD                     	ds	1
   470  0001BE                     _A6:
   471                           	opt stack 0
   472  0001BE                     	ds	1
   473  0001BF                     _A7:
   474                           	opt stack 0
   475  0001BF                     	ds	1
   476  0001C0                     _B0:
   477                           	opt stack 0
   478  0001C0                     	ds	1
   479  0001C1                     _B1:
   480                           	opt stack 0
   481  0001C1                     	ds	1
   482  0001C2                     _B2:
   483                           	opt stack 0
   484  0001C2                     	ds	1
   485  0001C3                     _B3:
   486                           	opt stack 0
   487  0001C3                     	ds	1
   488  0001C4                     _B4:
   489                           	opt stack 0
   490  0001C4                     	ds	1
   491  0001C5                     _B5:
   492                           	opt stack 0
   493  0001C5                     	ds	1
   494  0001C6                     _B6:
   495                           	opt stack 0
   496  0001C6                     	ds	1
   497  0001C7                     _B7:
   498                           	opt stack 0
   499  0001C7                     	ds	1
   500  0001C8                     _FlagTXSend:
   501                           	opt stack 0
   502  0001C8                     	ds	1
   503  0001C9                     _TA0:
   504                           	opt stack 0
   505  0001C9                     	ds	1
   506  0001CA                     _TA1:
   507                           	opt stack 0
   508  0001CA                     	ds	1
   509  0001CB                     _flagData:
   510                           	opt stack 0
   511  0001CB                     	ds	1
   512  0001CC                     _flagLink:
   513                           	opt stack 0
   514  0001CC                     	ds	1
   515                           tblptru	equ	0xFF8
   516                           tblptrh	equ	0xFF7
   517                           tblptrl	equ	0xFF6
   518                           tablat	equ	0xFF5
   519                           postinc0	equ	0xFEE
   520                           wreg	equ	0xFE8
   521                           postdec1	equ	0xFE5
   522                           fsr1l	equ	0xFE1
   523                           
   524                           	psect	bssCOMRAM
   525  000001                     __pbssCOMRAM:
   526                           	opt stack 0
   527  000001                     _ADC:
   528                           	opt stack 0
   529  000001                     	ds	20
   530  000015                     _voltagem:
   531                           	opt stack 0
   532  000015                     	ds	3
   533  000018                     _PortaSend:
   534                           	opt stack 0
   535  000018                     	ds	2
   536  00001A                     _Result:
   537                           	opt stack 0
   538  00001A                     	ds	2
   539  00001C                     _delay:
   540                           	opt stack 0
   541  00001C                     	ds	2
   542  00001E                     _SerialReceivedData:
   543                           	opt stack 0
   544  00001E                     	ds	1
   545  00001F                     _counter:
   546                           	opt stack 0
   547  00001F                     	ds	1
   548                           tblptru	equ	0xFF8
   549                           tblptrh	equ	0xFF7
   550                           tblptrl	equ	0xFF6
   551                           tablat	equ	0xFF5
   552                           postinc0	equ	0xFEE
   553                           wreg	equ	0xFE8
   554                           postdec1	equ	0xFE5
   555                           fsr1l	equ	0xFE1
   556                           
   557                           	psect	dataCOMRAM
   558  000020                     __pdataCOMRAM:
   559                           	opt stack 0
   560  000020                     __pwm:
   561                           	opt stack 0
   562  000020                     	ds	10
   563  00002A                     PicConfig@F5253:
   564                           	opt stack 0
   565  00002A                     	ds	4
   566  00002E                     WifiTCPSend@F5114:
   567                           	opt stack 0
   568  00002E                     	ds	3
   569  000031                     _SerialLen:
   570                           	opt stack 0
   571  000031                     	ds	2
   572  000033                     _WifiTCPDataLen:
   573                           	opt stack 0
   574  000033                     	ds	2
   575  000035                     _freq:
   576                           	opt stack 0
   577  000035                     	ds	2
   578                           tblptru	equ	0xFF8
   579                           tblptrh	equ	0xFF7
   580                           tblptrl	equ	0xFF6
   581                           tablat	equ	0xFF5
   582                           postinc0	equ	0xFEE
   583                           wreg	equ	0xFE8
   584                           postdec1	equ	0xFE5
   585                           fsr1l	equ	0xFE1
   586                           
   587                           	psect	bssBANK0
   588  000060                     __pbssBANK0:
   589                           	opt stack 0
   590  000060                     _SerialSendString:
   591                           	opt stack 0
   592  000060                     	ds	50
   593  000092                     _WifiTCPData:
   594                           	opt stack 0
   595  000092                     	ds	15
   596  0000A1                     _i:
   597                           	opt stack 0
   598  0000A1                     	ds	4
   599  0000A5                     _j:
   600                           	opt stack 0
   601  0000A5                     	ds	4
   602  0000A9                     _SerialReceivedString:
   603                           	opt stack 0
   604  0000A9                     	ds	50
   605                           tblptru	equ	0xFF8
   606                           tblptrh	equ	0xFF7
   607                           tblptrl	equ	0xFF6
   608                           tablat	equ	0xFF5
   609                           postinc0	equ	0xFEE
   610                           wreg	equ	0xFE8
   611                           postdec1	equ	0xFE5
   612                           fsr1l	equ	0xFE1
   613                           
   614                           	psect	dataBANK0
   615  0000EB                     __pdataBANK0:
   616                           	opt stack 0
   617  0000EB                     PicConfig@F5251:
   618                           	opt stack 0
   619  0000EB                     	ds	5
   620  0000F0                     PicConfig@F5255:
   621                           	opt stack 0
   622  0000F0                     	ds	4
   623  0000F4                     PicConfig@F5257:
   624                           	opt stack 0
   625  0000F4                     	ds	4
   626                           tblptru	equ	0xFF8
   627                           tblptrh	equ	0xFF7
   628                           tblptrl	equ	0xFF6
   629                           tablat	equ	0xFF5
   630                           postinc0	equ	0xFEE
   631                           wreg	equ	0xFE8
   632                           postdec1	equ	0xFE5
   633                           fsr1l	equ	0xFE1
   634                           
   635                           	psect	bssBANK1
   636  000100                     __pbssBANK1:
   637                           	opt stack 0
   638  000100                     _valoresEnviar:
   639                           	opt stack 0
   640  000100                     	ds	220
   641                           tblptru	equ	0xFF8
   642                           tblptrh	equ	0xFF7
   643                           tblptrl	equ	0xFF6
   644                           tablat	equ	0xFF5
   645                           postinc0	equ	0xFEE
   646                           wreg	equ	0xFE8
   647                           postdec1	equ	0xFE5
   648                           fsr1l	equ	0xFE1
   649                           
   650                           	psect	cstackBANK0
   651  0000DB                     __pcstackBANK0:
   652                           	opt stack 0
   653  0000DB                     ??_strlen:
   654  0000DB                     ??_delaySeg:
   655  0000DB                     SerialWifiWrite@Valor:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x0
   659  0000DB                     	ds	1
   660  0000DC                     delaySeg@j:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x1
   664  0000DC                     	ds	1
   665  0000DD                     SerialWifiWrite@Tamanho:
   666                           	opt stack 0
   667  0000DD                     strlen@cp:
   668                           	opt stack 0
   669                           
   670                           ; 2 bytes @ 0x2
   671  0000DD                     	ds	1
   672  0000DE                     delaySeg@i:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x3
   676  0000DE                     	ds	1
   677  0000DF                     SerialWifiWrite@i:
   678                           	opt stack 0
   679  0000DF                     SerialWrite@frase:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x4
   683  0000DF                     	ds	2
   684  0000E1                     ??_SerialWrite:
   685                           
   686                           ; 0 bytes @ 0x6
   687  0000E1                     	ds	2
   688  0000E3                     SerialWrite@tamanho:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x8
   692  0000E3                     	ds	1
   693  0000E4                     SerialWrite@indice:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x9
   697  0000E4                     	ds	1
   698  0000E5                     ??_lerValores:
   699                           
   700                           ; 0 bytes @ 0xA
   701  0000E5                     	ds	2
   702  0000E7                     lerValores@i:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0xC
   706  0000E7                     	ds	2
   707  0000E9                     lerValores@j:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0xE
   711  0000E9                     	ds	2
   712                           tblptru	equ	0xFF8
   713                           tblptrh	equ	0xFF7
   714                           tblptrl	equ	0xFF6
   715                           tablat	equ	0xFF5
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           postdec1	equ	0xFE5
   719                           fsr1l	equ	0xFE1
   720                           
   721                           	psect	cstackCOMRAM
   722  00003A                     __pcstackCOMRAM:
   723                           	opt stack 0
   724  00003A                     ??_pwmExecute:
   725  00003A                     waitToken@value:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x0
   729  00003A                     	ds	1
   730  00003B                     SerialReadUntilToken@charToCompare:
   731                           	opt stack 0
   732                           
   733                           ; 1 bytes @ 0x1
   734  00003B                     	ds	1
   735  00003C                     SerialReadUntilToken@i:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x2
   739  00003C                     	ds	2
   740  00003E                     ??_Interrupt:
   741                           
   742                           ; 0 bytes @ 0x4
   743  00003E                     	ds	14
   744  00004C                     ?_strlen:
   745                           	opt stack 0
   746  00004C                     SerialPrint@byte:
   747                           	opt stack 0
   748  00004C                     delaySeg@waitTime:
   749                           	opt stack 0
   750  00004C                     strlen@s:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x12
   754  00004C                     	ds	1
   755  00004D                     
   756                           ; 0 bytes @ 0x13
   757  00004D                     	ds	1
   758  00004E                     tblptru	equ	0xFF8
   759                           tblptrh	equ	0xFF7
   760                           tblptrl	equ	0xFF6
   761                           tablat	equ	0xFF5
   762                           postinc0	equ	0xFEE
   763                           wreg	equ	0xFE8
   764                           postdec1	equ	0xFE5
   765                           fsr1l	equ	0xFE1
   766                           
   767                           ; 0 bytes @ 0x14
   768 ;;
   769 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   770 ;;
   771 ;; *************** function _main *****************
   772 ;; Defined at:
   773 ;;		line 28 in file "main.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;		None
   776 ;; Auto vars:     Size  Location     Type
   777 ;;		None
   778 ;; Return value:  Size  Location     Type
   779 ;;		None               void
   780 ;; Registers used:
   781 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   782 ;; Tracked objects:
   783 ;;		On entry : 0/0
   784 ;;		On exit  : 0/0
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   787 ;;      Params:         0       0       0       0       0       0       0       0       0
   788 ;;      Locals:         0       0       0       0       0       0       0       0       0
   789 ;;      Temps:          0       0       0       0       0       0       0       0       0
   790 ;;      Totals:         0       0       0       0       0       0       0       0       0
   791 ;;Total ram usage:        0 bytes
   792 ;; Hardware stack levels required when called:    6
   793 ;; This function calls:
   794 ;;		_WifiTCPinit
   795 ;;		_initADC
   796 ;;		_initPWM
   797 ;;		_initUART
   798 ;;		_lerValores
   799 ;; This function is called by:
   800 ;;		Startup code after reset
   801 ;; This function uses a non-reentrant model
   802 ;;
   803                           
   804                           	psect	text0
   805  0012D0                     __ptext0:
   806                           	opt stack 0
   807  0012D0                     _main:
   808                           	opt stack 25
   809                           
   810                           ;main.c: 30: initUART();
   811                           
   812                           ;incstack = 0
   813  0012D0  EC3D  F009         	call	_initUART	;wreg free
   814                           
   815                           ;main.c: 31: initPWM();
   816  0012D4  ECA8  F009         	call	_initPWM	;wreg free
   817                           
   818                           ;main.c: 32: WifiTCPinit();
   819  0012D8  EC91  F007         	call	_WifiTCPinit	;wreg free
   820                           
   821                           ;main.c: 37: initADC();
   822  0012DC  EC77  F009         	call	_initADC	;wreg free
   823                           
   824                           ;main.c: 40: FlagTXSend = 0;
   825  0012E0  9039               	bcf	_FlagTXSend/(0+8),_FlagTXSend& (0+7),c
   826  0012E2  D000               	goto	l2632
   827  0012E4                     l2632:
   828                           
   829                           ;main.c: 44: lerValores();
   830  0012E4  EC72  F004         	call	_lerValores	;wreg free
   831  0012E8  D7FD               	goto	l2632
   832                           
   833                           ;main.c: 46: }
   834                           ;main.c: 47: return;
   835  0012EA  EF0C  F004         	goto	start
   836  0012EE                     __end_of_main:
   837                           	opt stack 0
   838                           tblptru	equ	0xFF8
   839                           tblptrh	equ	0xFF7
   840                           tblptrl	equ	0xFF6
   841                           tablat	equ	0xFF5
   842                           postinc0	equ	0xFEE
   843                           wreg	equ	0xFE8
   844                           postdec1	equ	0xFE5
   845                           fsr1l	equ	0xFE1
   846                           
   847 ;; *************** function _lerValores *****************
   848 ;; Defined at:
   849 ;;		line 98 in file "ADXL345.h"
   850 ;; Parameters:    Size  Location     Type
   851 ;;		None
   852 ;; Auto vars:     Size  Location     Type
   853 ;;  j               2   14[BANK0 ] unsigned int 
   854 ;;  i               2   12[BANK0 ] unsigned int 
   855 ;; Return value:  Size  Location     Type
   856 ;;		None               void
   857 ;; Registers used:
   858 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   864 ;;      Params:         0       0       0       0       0       0       0       0       0
   865 ;;      Locals:         0       4       0       0       0       0       0       0       0
   866 ;;      Temps:          0       2       0       0       0       0       0       0       0
   867 ;;      Totals:         0       6       0       0       0       0       0       0       0
   868 ;;Total ram usage:        6 bytes
   869 ;; Hardware stack levels used:    1
   870 ;; Hardware stack levels required when called:    5
   871 ;; This function calls:
   872 ;;		_SerialWifiWrite
   873 ;;		_SerialWrite
   874 ;;		_StartADC
   875 ;; This function is called by:
   876 ;;		_main
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880                           	psect	text1
   881  0008E4                     __ptext1:
   882                           	opt stack 0
   883  0008E4                     _lerValores:
   884                           	opt stack 25
   885                           
   886                           ;ADXL345.h: 100: for(unsigned i = 0; i < 110; i += 22){
   887                           
   888                           ;incstack = 0
   889  0008E4  0E00               	movlw	0
   890  0008E6  0100               	movlb	0	; () banked
   891  0008E8  6FE8               	movwf	(lerValores@i+1)& (0+255),b
   892  0008EA  0E00               	movlw	0
   893  0008EC  6FE7               	movwf	lerValores@i& (0+255),b
   894                           
   895                           ; BSR set to: 0
   896  0008EE  0100               	movlb	0	; () banked
   897  0008F0  51E8               	movf	(lerValores@i+1)& (0+255),w,b
   898  0008F2  E106               	bnz	u1840
   899  0008F4  0E6E               	movlw	110
   900  0008F6  0100               	movlb	0	; () banked
   901  0008F8  5DE7               	subwf	lerValores@i& (0+255),w,b
   902  0008FA  B0D8               	btfsc	status,0,c
   903  0008FC  D0DF               	goto	l2448
   904  0008FE  D001               	goto	l2420
   905  000900                     u1840:
   906                           
   907                           ; BSR set to: 0
   908  000900  D0DD               	goto	l2448
   909  000902                     l2420:
   910                           
   911                           ; BSR set to: 0
   912                           ;ADXL345.h: 101: _delay((unsigned long)((10)*(48000000/4000.0)));
   913  000902  0E9C               	movlw	156
   914  000904  0100               	movlb	0	; () banked
   915  000906  6FE5               	movwf	??_lerValores& (0+255),b
   916  000908  0ED7               	movlw	215
   917  00090A                     u2107:
   918  00090A  2EE8               	decfsz	wreg,f,c
   919  00090C  D7FE               	goto	u2107
   920  00090E  2FE5               	decfsz	??_lerValores& (0+255),f,b
   921  000910  D7FC               	goto	u2107
   922  000912  F000               	nop	
   923                           
   924                           ;ADXL345.h: 103: StartADC();
   925  000914  ECD9  F007         	call	_StartADC	;wreg free
   926                           
   927                           ;ADXL345.h: 131: valoresEnviar[i+12] = ADC[0];
   928  000918  0E0C               	movlw	12
   929  00091A  0100               	movlb	0	; () banked
   930  00091C  25E7               	addwf	lerValores@i& (0+255),w,b
   931  00091E  0100               	movlb	0	; () banked
   932  000920  6FE5               	movwf	??_lerValores& (0+255),b
   933  000922  0E00               	movlw	0
   934  000924  0100               	movlb	0	; () banked
   935  000926  21E8               	addwfc	(lerValores@i+1)& (0+255),w,b
   936  000928  0100               	movlb	0	; () banked
   937  00092A  6FE6               	movwf	(??_lerValores+1)& (0+255),b
   938  00092C  0E00               	movlw	low _valoresEnviar
   939  00092E  0100               	movlb	0	; () banked
   940  000930  25E5               	addwf	??_lerValores& (0+255),w,b
   941  000932  6ED9               	movwf	fsr2l,c
   942  000934  0E01               	movlw	high _valoresEnviar
   943  000936  0100               	movlb	0	; () banked
   944  000938  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
   945  00093A  6EDA               	movwf	fsr2h,c
   946  00093C  C001  FFDF         	movff	_ADC,indf2
   947                           
   948                           ; BSR set to: 0
   949                           ;ADXL345.h: 132: valoresEnviar[i+13] = ADC[1];
   950  000940  0E0D               	movlw	13
   951  000942  0100               	movlb	0	; () banked
   952  000944  25E7               	addwf	lerValores@i& (0+255),w,b
   953  000946  0100               	movlb	0	; () banked
   954  000948  6FE5               	movwf	??_lerValores& (0+255),b
   955  00094A  0E00               	movlw	0
   956  00094C  0100               	movlb	0	; () banked
   957  00094E  21E8               	addwfc	(lerValores@i+1)& (0+255),w,b
   958  000950  0100               	movlb	0	; () banked
   959  000952  6FE6               	movwf	(??_lerValores+1)& (0+255),b
   960  000954  0E00               	movlw	low _valoresEnviar
   961  000956  0100               	movlb	0	; () banked
   962  000958  25E5               	addwf	??_lerValores& (0+255),w,b
   963  00095A  6ED9               	movwf	fsr2l,c
   964  00095C  0E01               	movlw	high _valoresEnviar
   965  00095E  0100               	movlb	0	; () banked
   966  000960  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
   967  000962  6EDA               	movwf	fsr2h,c
   968  000964  C003  FFDF         	movff	_ADC+2,indf2
   969                           
   970                           ; BSR set to: 0
   971                           ;ADXL345.h: 133: valoresEnviar[i+14] = ADC[2];
   972  000968  0E0E               	movlw	14
   973  00096A  0100               	movlb	0	; () banked
   974  00096C  25E7               	addwf	lerValores@i& (0+255),w,b
   975  00096E  0100               	movlb	0	; () banked
   976  000970  6FE5               	movwf	??_lerValores& (0+255),b
   977  000972  0E00               	movlw	0
   978  000974  0100               	movlb	0	; () banked
   979  000976  21E8               	addwfc	(lerValores@i+1)& (0+255),w,b
   980  000978  0100               	movlb	0	; () banked
   981  00097A  6FE6               	movwf	(??_lerValores+1)& (0+255),b
   982  00097C  0E00               	movlw	low _valoresEnviar
   983  00097E  0100               	movlb	0	; () banked
   984  000980  25E5               	addwf	??_lerValores& (0+255),w,b
   985  000982  6ED9               	movwf	fsr2l,c
   986  000984  0E01               	movlw	high _valoresEnviar
   987  000986  0100               	movlb	0	; () banked
   988  000988  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
   989  00098A  6EDA               	movwf	fsr2h,c
   990  00098C  C005  FFDF         	movff	_ADC+4,indf2
   991                           
   992                           ; BSR set to: 0
   993                           ;ADXL345.h: 134: valoresEnviar[i+15] = ADC[3];
   994  000990  0E0F               	movlw	15
   995  000992  0100               	movlb	0	; () banked
   996  000994  25E7               	addwf	lerValores@i& (0+255),w,b
   997  000996  0100               	movlb	0	; () banked
   998  000998  6FE5               	movwf	??_lerValores& (0+255),b
   999  00099A  0E00               	movlw	0
  1000  00099C  0100               	movlb	0	; () banked
  1001  00099E  21E8               	addwfc	(lerValores@i+1)& (0+255),w,b
  1002  0009A0  0100               	movlb	0	; () banked
  1003  0009A2  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1004  0009A4  0E00               	movlw	low _valoresEnviar
  1005  0009A6  0100               	movlb	0	; () banked
  1006  0009A8  25E5               	addwf	??_lerValores& (0+255),w,b
  1007  0009AA  6ED9               	movwf	fsr2l,c
  1008  0009AC  0E01               	movlw	high _valoresEnviar
  1009  0009AE  0100               	movlb	0	; () banked
  1010  0009B0  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1011  0009B2  6EDA               	movwf	fsr2h,c
  1012  0009B4  C007  FFDF         	movff	_ADC+6,indf2
  1013                           
  1014                           ; BSR set to: 0
  1015                           ;ADXL345.h: 135: valoresEnviar[i+16] = ADC[4];
  1016  0009B8  0E10               	movlw	16
  1017  0009BA  0100               	movlb	0	; () banked
  1018  0009BC  25E7               	addwf	lerValores@i& (0+255),w,b
  1019  0009BE  0100               	movlb	0	; () banked
  1020  0009C0  6FE5               	movwf	??_lerValores& (0+255),b
  1021  0009C2  0E00               	movlw	0
  1022  0009C4  0100               	movlb	0	; () banked
  1023  0009C6  21E8               	addwfc	(lerValores@i+1)& (0+255),w,b
  1024  0009C8  0100               	movlb	0	; () banked
  1025  0009CA  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1026  0009CC  0E00               	movlw	low _valoresEnviar
  1027  0009CE  0100               	movlb	0	; () banked
  1028  0009D0  25E5               	addwf	??_lerValores& (0+255),w,b
  1029  0009D2  6ED9               	movwf	fsr2l,c
  1030  0009D4  0E01               	movlw	high _valoresEnviar
  1031  0009D6  0100               	movlb	0	; () banked
  1032  0009D8  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1033  0009DA  6EDA               	movwf	fsr2h,c
  1034  0009DC  C009  FFDF         	movff	_ADC+8,indf2
  1035                           
  1036                           ; BSR set to: 0
  1037                           ;ADXL345.h: 136: valoresEnviar[i+17] = ADC[5];
  1038  0009E0  0E11               	movlw	17
  1039  0009E2  0100               	movlb	0	; () banked
  1040  0009E4  25E7               	addwf	lerValores@i& (0+255),w,b
  1041  0009E6  0100               	movlb	0	; () banked
  1042  0009E8  6FE5               	movwf	??_lerValores& (0+255),b
  1043  0009EA  0E00               	movlw	0
  1044  0009EC  0100               	movlb	0	; () banked
  1045  0009EE  21E8               	addwfc	(lerValores@i+1)& (0+255),w,b
  1046  0009F0  0100               	movlb	0	; () banked
  1047  0009F2  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1048  0009F4  0E00               	movlw	low _valoresEnviar
  1049  0009F6  0100               	movlb	0	; () banked
  1050  0009F8  25E5               	addwf	??_lerValores& (0+255),w,b
  1051  0009FA  6ED9               	movwf	fsr2l,c
  1052  0009FC  0E01               	movlw	high _valoresEnviar
  1053  0009FE  0100               	movlb	0	; () banked
  1054  000A00  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1055  000A02  6EDA               	movwf	fsr2h,c
  1056  000A04  C00B  FFDF         	movff	_ADC+10,indf2
  1057                           
  1058                           ; BSR set to: 0
  1059                           ;ADXL345.h: 137: valoresEnviar[i+18] = ADC[6];
  1060  000A08  0E12               	movlw	18
  1061  000A0A  0100               	movlb	0	; () banked
  1062  000A0C  25E7               	addwf	lerValores@i& (0+255),w,b
  1063  000A0E  0100               	movlb	0	; () banked
  1064  000A10  6FE5               	movwf	??_lerValores& (0+255),b
  1065  000A12  0E00               	movlw	0
  1066  000A14  0100               	movlb	0	; () banked
  1067  000A16  21E8               	addwfc	(lerValores@i+1)& (0+255),w,b
  1068  000A18  0100               	movlb	0	; () banked
  1069  000A1A  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1070  000A1C  0E00               	movlw	low _valoresEnviar
  1071  000A1E  0100               	movlb	0	; () banked
  1072  000A20  25E5               	addwf	??_lerValores& (0+255),w,b
  1073  000A22  6ED9               	movwf	fsr2l,c
  1074  000A24  0E01               	movlw	high _valoresEnviar
  1075  000A26  0100               	movlb	0	; () banked
  1076  000A28  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1077  000A2A  6EDA               	movwf	fsr2h,c
  1078  000A2C  C00D  FFDF         	movff	_ADC+12,indf2
  1079                           
  1080                           ; BSR set to: 0
  1081                           ;ADXL345.h: 138: valoresEnviar[i+19] = ADC[7];
  1082  000A30  0E13               	movlw	19
  1083  000A32  0100               	movlb	0	; () banked
  1084  000A34  25E7               	addwf	lerValores@i& (0+255),w,b
  1085  000A36  0100               	movlb	0	; () banked
  1086  000A38  6FE5               	movwf	??_lerValores& (0+255),b
  1087  000A3A  0E00               	movlw	0
  1088  000A3C  0100               	movlb	0	; () banked
  1089  000A3E  21E8               	addwfc	(lerValores@i+1)& (0+255),w,b
  1090  000A40  0100               	movlb	0	; () banked
  1091  000A42  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1092  000A44  0E00               	movlw	low _valoresEnviar
  1093  000A46  0100               	movlb	0	; () banked
  1094  000A48  25E5               	addwf	??_lerValores& (0+255),w,b
  1095  000A4A  6ED9               	movwf	fsr2l,c
  1096  000A4C  0E01               	movlw	high _valoresEnviar
  1097  000A4E  0100               	movlb	0	; () banked
  1098  000A50  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1099  000A52  6EDA               	movwf	fsr2h,c
  1100  000A54  C00F  FFDF         	movff	_ADC+14,indf2
  1101                           
  1102                           ; BSR set to: 0
  1103                           ;ADXL345.h: 139: valoresEnviar[i+20] = ADC[8];
  1104  000A58  0E14               	movlw	20
  1105  000A5A  0100               	movlb	0	; () banked
  1106  000A5C  25E7               	addwf	lerValores@i& (0+255),w,b
  1107  000A5E  0100               	movlb	0	; () banked
  1108  000A60  6FE5               	movwf	??_lerValores& (0+255),b
  1109  000A62  0E00               	movlw	0
  1110  000A64  0100               	movlb	0	; () banked
  1111  000A66  21E8               	addwfc	(lerValores@i+1)& (0+255),w,b
  1112  000A68  0100               	movlb	0	; () banked
  1113  000A6A  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1114  000A6C  0E00               	movlw	low _valoresEnviar
  1115  000A6E  0100               	movlb	0	; () banked
  1116  000A70  25E5               	addwf	??_lerValores& (0+255),w,b
  1117  000A72  6ED9               	movwf	fsr2l,c
  1118  000A74  0E01               	movlw	high _valoresEnviar
  1119  000A76  0100               	movlb	0	; () banked
  1120  000A78  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1121  000A7A  6EDA               	movwf	fsr2h,c
  1122  000A7C  C011  FFDF         	movff	_ADC+16,indf2
  1123                           
  1124                           ; BSR set to: 0
  1125                           ;ADXL345.h: 140: valoresEnviar[i+21] = ADC[9];
  1126  000A80  0E15               	movlw	21
  1127  000A82  0100               	movlb	0	; () banked
  1128  000A84  25E7               	addwf	lerValores@i& (0+255),w,b
  1129  000A86  0100               	movlb	0	; () banked
  1130  000A88  6FE5               	movwf	??_lerValores& (0+255),b
  1131  000A8A  0E00               	movlw	0
  1132  000A8C  0100               	movlb	0	; () banked
  1133  000A8E  21E8               	addwfc	(lerValores@i+1)& (0+255),w,b
  1134  000A90  0100               	movlb	0	; () banked
  1135  000A92  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1136  000A94  0E00               	movlw	low _valoresEnviar
  1137  000A96  0100               	movlb	0	; () banked
  1138  000A98  25E5               	addwf	??_lerValores& (0+255),w,b
  1139  000A9A  6ED9               	movwf	fsr2l,c
  1140  000A9C  0E01               	movlw	high _valoresEnviar
  1141  000A9E  0100               	movlb	0	; () banked
  1142  000AA0  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1143  000AA2  6EDA               	movwf	fsr2h,c
  1144  000AA4  C013  FFDF         	movff	_ADC+18,indf2
  1145                           
  1146                           ; BSR set to: 0
  1147  000AA8  0E16               	movlw	22
  1148  000AAA  0100               	movlb	0	; () banked
  1149  000AAC  27E7               	addwf	lerValores@i& (0+255),f,b
  1150  000AAE  0E00               	movlw	0
  1151  000AB0  23E8               	addwfc	(lerValores@i+1)& (0+255),f,b
  1152                           
  1153                           ; BSR set to: 0
  1154  000AB2  0100               	movlb	0	; () banked
  1155  000AB4  51E8               	movf	(lerValores@i+1)& (0+255),w,b
  1156  000AB6  E102               	bnz	l2448
  1157  000AB8  D71D               	goto	L1
  1158  000ABA  D000               	goto	l2448
  1159  000ABC                     l2448:
  1160                           
  1161                           ; BSR set to: 0
  1162                           ;ADXL345.h: 143: }
  1163                           ;ADXL345.h: 145: SerialWrite((unsigned char *)sendCmd);
  1164  000ABC  0E22               	movlw	low _sendCmd
  1165  000ABE  0100               	movlb	0	; () banked
  1166  000AC0  6FDF               	movwf	SerialWrite@frase& (0+255),b
  1167  000AC2  0E08               	movlw	high _sendCmd
  1168  000AC4  0100               	movlb	0	; () banked
  1169  000AC6  6FE0               	movwf	(SerialWrite@frase+1)& (0+255),b
  1170  000AC8  EC36  F007         	call	_SerialWrite	;wreg free
  1171                           
  1172                           ;ADXL345.h: 147: for(unsigned j = 110; j < 220; j += 22){
  1173  000ACC  0E00               	movlw	0
  1174  000ACE  0100               	movlb	0	; () banked
  1175  000AD0  6FEA               	movwf	(lerValores@j+1)& (0+255),b
  1176  000AD2  0E6E               	movlw	110
  1177  000AD4  6FE9               	movwf	lerValores@j& (0+255),b
  1178                           
  1179                           ; BSR set to: 0
  1180  000AD6  0100               	movlb	0	; () banked
  1181  000AD8  51EA               	movf	(lerValores@j+1)& (0+255),w,b
  1182  000ADA  E106               	bnz	u1860
  1183  000ADC  0EDC               	movlw	220
  1184  000ADE  0100               	movlb	0	; () banked
  1185  000AE0  5DE9               	subwf	lerValores@j& (0+255),w,b
  1186  000AE2  B0D8               	btfsc	status,0,c
  1187  000AE4  D0DF               	goto	l2484
  1188  000AE6  D001               	goto	l2456
  1189  000AE8                     u1860:
  1190                           
  1191                           ; BSR set to: 0
  1192  000AE8  D0DD               	goto	l2484
  1193  000AEA                     l2456:
  1194                           
  1195                           ; BSR set to: 0
  1196                           ;ADXL345.h: 148: _delay((unsigned long)((10)*(48000000/4000.0)));
  1197  000AEA  0E9C               	movlw	156
  1198  000AEC  0100               	movlb	0	; () banked
  1199  000AEE  6FE5               	movwf	??_lerValores& (0+255),b
  1200  000AF0  0ED7               	movlw	215
  1201  000AF2                     u2117:
  1202  000AF2  2EE8               	decfsz	wreg,f,c
  1203  000AF4  D7FE               	goto	u2117
  1204  000AF6  2FE5               	decfsz	??_lerValores& (0+255),f,b
  1205  000AF8  D7FC               	goto	u2117
  1206  000AFA  F000               	nop	
  1207                           
  1208                           ;ADXL345.h: 149: StartADC();
  1209  000AFC  ECD9  F007         	call	_StartADC	;wreg free
  1210                           
  1211                           ;ADXL345.h: 174: valoresEnviar[j+12] = ADC[0];
  1212  000B00  0E0C               	movlw	12
  1213  000B02  0100               	movlb	0	; () banked
  1214  000B04  25E9               	addwf	lerValores@j& (0+255),w,b
  1215  000B06  0100               	movlb	0	; () banked
  1216  000B08  6FE5               	movwf	??_lerValores& (0+255),b
  1217  000B0A  0E00               	movlw	0
  1218  000B0C  0100               	movlb	0	; () banked
  1219  000B0E  21EA               	addwfc	(lerValores@j+1)& (0+255),w,b
  1220  000B10  0100               	movlb	0	; () banked
  1221  000B12  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1222  000B14  0E00               	movlw	low _valoresEnviar
  1223  000B16  0100               	movlb	0	; () banked
  1224  000B18  25E5               	addwf	??_lerValores& (0+255),w,b
  1225  000B1A  6ED9               	movwf	fsr2l,c
  1226  000B1C  0E01               	movlw	high _valoresEnviar
  1227  000B1E  0100               	movlb	0	; () banked
  1228  000B20  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1229  000B22  6EDA               	movwf	fsr2h,c
  1230  000B24  C001  FFDF         	movff	_ADC,indf2
  1231                           
  1232                           ; BSR set to: 0
  1233                           ;ADXL345.h: 175: valoresEnviar[j+13] = ADC[1];
  1234  000B28  0E0D               	movlw	13
  1235  000B2A  0100               	movlb	0	; () banked
  1236  000B2C  25E9               	addwf	lerValores@j& (0+255),w,b
  1237  000B2E  0100               	movlb	0	; () banked
  1238  000B30  6FE5               	movwf	??_lerValores& (0+255),b
  1239  000B32  0E00               	movlw	0
  1240  000B34  0100               	movlb	0	; () banked
  1241  000B36  21EA               	addwfc	(lerValores@j+1)& (0+255),w,b
  1242  000B38  0100               	movlb	0	; () banked
  1243  000B3A  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1244  000B3C  0E00               	movlw	low _valoresEnviar
  1245  000B3E  0100               	movlb	0	; () banked
  1246  000B40  25E5               	addwf	??_lerValores& (0+255),w,b
  1247  000B42  6ED9               	movwf	fsr2l,c
  1248  000B44  0E01               	movlw	high _valoresEnviar
  1249  000B46  0100               	movlb	0	; () banked
  1250  000B48  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1251  000B4A  6EDA               	movwf	fsr2h,c
  1252  000B4C  C003  FFDF         	movff	_ADC+2,indf2
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;ADXL345.h: 176: valoresEnviar[j+14] = ADC[2];
  1256  000B50  0E0E               	movlw	14
  1257  000B52  0100               	movlb	0	; () banked
  1258  000B54  25E9               	addwf	lerValores@j& (0+255),w,b
  1259  000B56  0100               	movlb	0	; () banked
  1260  000B58  6FE5               	movwf	??_lerValores& (0+255),b
  1261  000B5A  0E00               	movlw	0
  1262  000B5C  0100               	movlb	0	; () banked
  1263  000B5E  21EA               	addwfc	(lerValores@j+1)& (0+255),w,b
  1264  000B60  0100               	movlb	0	; () banked
  1265  000B62  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1266  000B64  0E00               	movlw	low _valoresEnviar
  1267  000B66  0100               	movlb	0	; () banked
  1268  000B68  25E5               	addwf	??_lerValores& (0+255),w,b
  1269  000B6A  6ED9               	movwf	fsr2l,c
  1270  000B6C  0E01               	movlw	high _valoresEnviar
  1271  000B6E  0100               	movlb	0	; () banked
  1272  000B70  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1273  000B72  6EDA               	movwf	fsr2h,c
  1274  000B74  C005  FFDF         	movff	_ADC+4,indf2
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;ADXL345.h: 177: valoresEnviar[j+15] = ADC[3];
  1278  000B78  0E0F               	movlw	15
  1279  000B7A  0100               	movlb	0	; () banked
  1280  000B7C  25E9               	addwf	lerValores@j& (0+255),w,b
  1281  000B7E  0100               	movlb	0	; () banked
  1282  000B80  6FE5               	movwf	??_lerValores& (0+255),b
  1283  000B82  0E00               	movlw	0
  1284  000B84  0100               	movlb	0	; () banked
  1285  000B86  21EA               	addwfc	(lerValores@j+1)& (0+255),w,b
  1286  000B88  0100               	movlb	0	; () banked
  1287  000B8A  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1288  000B8C  0E00               	movlw	low _valoresEnviar
  1289  000B8E  0100               	movlb	0	; () banked
  1290  000B90  25E5               	addwf	??_lerValores& (0+255),w,b
  1291  000B92  6ED9               	movwf	fsr2l,c
  1292  000B94  0E01               	movlw	high _valoresEnviar
  1293  000B96  0100               	movlb	0	; () banked
  1294  000B98  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1295  000B9A  6EDA               	movwf	fsr2h,c
  1296  000B9C  C007  FFDF         	movff	_ADC+6,indf2
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;ADXL345.h: 178: valoresEnviar[j+16] = ADC[4];
  1300  000BA0  0E10               	movlw	16
  1301  000BA2  0100               	movlb	0	; () banked
  1302  000BA4  25E9               	addwf	lerValores@j& (0+255),w,b
  1303  000BA6  0100               	movlb	0	; () banked
  1304  000BA8  6FE5               	movwf	??_lerValores& (0+255),b
  1305  000BAA  0E00               	movlw	0
  1306  000BAC  0100               	movlb	0	; () banked
  1307  000BAE  21EA               	addwfc	(lerValores@j+1)& (0+255),w,b
  1308  000BB0  0100               	movlb	0	; () banked
  1309  000BB2  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1310  000BB4  0E00               	movlw	low _valoresEnviar
  1311  000BB6  0100               	movlb	0	; () banked
  1312  000BB8  25E5               	addwf	??_lerValores& (0+255),w,b
  1313  000BBA  6ED9               	movwf	fsr2l,c
  1314  000BBC  0E01               	movlw	high _valoresEnviar
  1315  000BBE  0100               	movlb	0	; () banked
  1316  000BC0  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1317  000BC2  6EDA               	movwf	fsr2h,c
  1318  000BC4  C009  FFDF         	movff	_ADC+8,indf2
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;ADXL345.h: 179: valoresEnviar[j+17] = ADC[5];
  1322  000BC8  0E11               	movlw	17
  1323  000BCA  0100               	movlb	0	; () banked
  1324  000BCC  25E9               	addwf	lerValores@j& (0+255),w,b
  1325  000BCE  0100               	movlb	0	; () banked
  1326  000BD0  6FE5               	movwf	??_lerValores& (0+255),b
  1327  000BD2  0E00               	movlw	0
  1328  000BD4  0100               	movlb	0	; () banked
  1329  000BD6  21EA               	addwfc	(lerValores@j+1)& (0+255),w,b
  1330  000BD8  0100               	movlb	0	; () banked
  1331  000BDA  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1332  000BDC  0E00               	movlw	low _valoresEnviar
  1333  000BDE  0100               	movlb	0	; () banked
  1334  000BE0  25E5               	addwf	??_lerValores& (0+255),w,b
  1335  000BE2  6ED9               	movwf	fsr2l,c
  1336  000BE4  0E01               	movlw	high _valoresEnviar
  1337  000BE6  0100               	movlb	0	; () banked
  1338  000BE8  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1339  000BEA  6EDA               	movwf	fsr2h,c
  1340  000BEC  C00B  FFDF         	movff	_ADC+10,indf2
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;ADXL345.h: 180: valoresEnviar[j+18] = ADC[6];
  1344  000BF0  0E12               	movlw	18
  1345  000BF2  0100               	movlb	0	; () banked
  1346  000BF4  25E9               	addwf	lerValores@j& (0+255),w,b
  1347  000BF6  0100               	movlb	0	; () banked
  1348  000BF8  6FE5               	movwf	??_lerValores& (0+255),b
  1349  000BFA  0E00               	movlw	0
  1350  000BFC  0100               	movlb	0	; () banked
  1351  000BFE  21EA               	addwfc	(lerValores@j+1)& (0+255),w,b
  1352  000C00  0100               	movlb	0	; () banked
  1353  000C02  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1354  000C04  0E00               	movlw	low _valoresEnviar
  1355  000C06  0100               	movlb	0	; () banked
  1356  000C08  25E5               	addwf	??_lerValores& (0+255),w,b
  1357  000C0A  6ED9               	movwf	fsr2l,c
  1358  000C0C  0E01               	movlw	high _valoresEnviar
  1359  000C0E  0100               	movlb	0	; () banked
  1360  000C10  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1361  000C12  6EDA               	movwf	fsr2h,c
  1362  000C14  C00D  FFDF         	movff	_ADC+12,indf2
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;ADXL345.h: 181: valoresEnviar[j+19] = ADC[7];
  1366  000C18  0E13               	movlw	19
  1367  000C1A  0100               	movlb	0	; () banked
  1368  000C1C  25E9               	addwf	lerValores@j& (0+255),w,b
  1369  000C1E  0100               	movlb	0	; () banked
  1370  000C20  6FE5               	movwf	??_lerValores& (0+255),b
  1371  000C22  0E00               	movlw	0
  1372  000C24  0100               	movlb	0	; () banked
  1373  000C26  21EA               	addwfc	(lerValores@j+1)& (0+255),w,b
  1374  000C28  0100               	movlb	0	; () banked
  1375  000C2A  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1376  000C2C  0E00               	movlw	low _valoresEnviar
  1377  000C2E  0100               	movlb	0	; () banked
  1378  000C30  25E5               	addwf	??_lerValores& (0+255),w,b
  1379  000C32  6ED9               	movwf	fsr2l,c
  1380  000C34  0E01               	movlw	high _valoresEnviar
  1381  000C36  0100               	movlb	0	; () banked
  1382  000C38  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1383  000C3A  6EDA               	movwf	fsr2h,c
  1384  000C3C  C00F  FFDF         	movff	_ADC+14,indf2
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;ADXL345.h: 182: valoresEnviar[j+20] = ADC[8];
  1388  000C40  0E14               	movlw	20
  1389  000C42  0100               	movlb	0	; () banked
  1390  000C44  25E9               	addwf	lerValores@j& (0+255),w,b
  1391  000C46  0100               	movlb	0	; () banked
  1392  000C48  6FE5               	movwf	??_lerValores& (0+255),b
  1393  000C4A  0E00               	movlw	0
  1394  000C4C  0100               	movlb	0	; () banked
  1395  000C4E  21EA               	addwfc	(lerValores@j+1)& (0+255),w,b
  1396  000C50  0100               	movlb	0	; () banked
  1397  000C52  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1398  000C54  0E00               	movlw	low _valoresEnviar
  1399  000C56  0100               	movlb	0	; () banked
  1400  000C58  25E5               	addwf	??_lerValores& (0+255),w,b
  1401  000C5A  6ED9               	movwf	fsr2l,c
  1402  000C5C  0E01               	movlw	high _valoresEnviar
  1403  000C5E  0100               	movlb	0	; () banked
  1404  000C60  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1405  000C62  6EDA               	movwf	fsr2h,c
  1406  000C64  C011  FFDF         	movff	_ADC+16,indf2
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;ADXL345.h: 183: valoresEnviar[j+21] = ADC[9];
  1410  000C68  0E15               	movlw	21
  1411  000C6A  0100               	movlb	0	; () banked
  1412  000C6C  25E9               	addwf	lerValores@j& (0+255),w,b
  1413  000C6E  0100               	movlb	0	; () banked
  1414  000C70  6FE5               	movwf	??_lerValores& (0+255),b
  1415  000C72  0E00               	movlw	0
  1416  000C74  0100               	movlb	0	; () banked
  1417  000C76  21EA               	addwfc	(lerValores@j+1)& (0+255),w,b
  1418  000C78  0100               	movlb	0	; () banked
  1419  000C7A  6FE6               	movwf	(??_lerValores+1)& (0+255),b
  1420  000C7C  0E00               	movlw	low _valoresEnviar
  1421  000C7E  0100               	movlb	0	; () banked
  1422  000C80  25E5               	addwf	??_lerValores& (0+255),w,b
  1423  000C82  6ED9               	movwf	fsr2l,c
  1424  000C84  0E01               	movlw	high _valoresEnviar
  1425  000C86  0100               	movlb	0	; () banked
  1426  000C88  21E6               	addwfc	(??_lerValores+1)& (0+255),w,b
  1427  000C8A  6EDA               	movwf	fsr2h,c
  1428  000C8C  C013  FFDF         	movff	_ADC+18,indf2
  1429                           
  1430                           ; BSR set to: 0
  1431  000C90  0E16               	movlw	22
  1432  000C92  0100               	movlb	0	; () banked
  1433  000C94  27E9               	addwf	lerValores@j& (0+255),f,b
  1434  000C96  0E00               	movlw	0
  1435  000C98  23EA               	addwfc	(lerValores@j+1)& (0+255),f,b
  1436                           
  1437                           ; BSR set to: 0
  1438  000C9A  0100               	movlb	0	; () banked
  1439  000C9C  51EA               	movf	(lerValores@j+1)& (0+255),w,b
  1440  000C9E  E102               	bnz	l2484
  1441  000CA0  D71D               	goto	L2
  1442  000CA2  D000               	goto	l2484
  1443  000CA4                     l2484:
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;ADXL345.h: 186: }
  1447                           ;ADXL345.h: 188: SerialWifiWrite((unsigned char *)valoresEnviar,220);
  1448  000CA4  0E00               	movlw	low _valoresEnviar
  1449  000CA6  0100               	movlb	0	; () banked
  1450  000CA8  6FDB               	movwf	SerialWifiWrite@Valor& (0+255),b
  1451  000CAA  0E01               	movlw	high _valoresEnviar
  1452  000CAC  0100               	movlb	0	; () banked
  1453  000CAE  6FDC               	movwf	(SerialWifiWrite@Valor+1)& (0+255),b
  1454  000CB0  0E00               	movlw	0
  1455  000CB2  0100               	movlb	0	; () banked
  1456  000CB4  6FDE               	movwf	(SerialWifiWrite@Tamanho+1)& (0+255),b
  1457  000CB6  0EDC               	movlw	220
  1458  000CB8  6FDD               	movwf	SerialWifiWrite@Tamanho& (0+255),b
  1459  000CBA  EC1B  F009         	call	_SerialWifiWrite	;wreg free
  1460                           
  1461                           ;ADXL345.h: 189: SerialWrite("\r\n");
  1462  000CBE  0E56               	movlw	low (STR_3+33)
  1463  000CC0  0100               	movlb	0	; () banked
  1464  000CC2  6FDF               	movwf	SerialWrite@frase& (0+255),b
  1465  000CC4  0E08               	movlw	high (STR_3+33)
  1466  000CC6  0100               	movlb	0	; () banked
  1467  000CC8  6FE0               	movwf	(SerialWrite@frase+1)& (0+255),b
  1468  000CCA  EC36  F007         	call	_SerialWrite	;wreg free
  1469  000CCE  D000               	goto	l350
  1470  000CD0                     l350:
  1471  000CD0  0012               	return		;funcret
  1472  000CD2                     __end_of_lerValores:
  1473                           	opt stack 0
  1474                           tblptru	equ	0xFF8
  1475                           tblptrh	equ	0xFF7
  1476                           tblptrl	equ	0xFF6
  1477                           tablat	equ	0xFF5
  1478                           postinc0	equ	0xFEE
  1479                           wreg	equ	0xFE8
  1480                           postdec1	equ	0xFE5
  1481                           fsr1l	equ	0xFE1
  1482                           indf2	equ	0xFDF
  1483                           fsr2h	equ	0xFDA
  1484                           fsr2l	equ	0xFD9
  1485                           status	equ	0xFD8
  1486                           
  1487 ;; *************** function _StartADC *****************
  1488 ;; Defined at:
  1489 ;;		line 34 in file "testeadc.h"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;		None
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;		None
  1494 ;; Return value:  Size  Location     Type
  1495 ;;		None               void
  1496 ;; Registers used:
  1497 ;;		None
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1503 ;;      Params:         0       0       0       0       0       0       0       0       0
  1504 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1505 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1506 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1507 ;;Total ram usage:        0 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:    3
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_lerValores
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text2
  1518  000FB2                     __ptext2:
  1519                           	opt stack 0
  1520  000FB2                     _StartADC:
  1521                           	opt stack 26
  1522                           
  1523                           ;testeadc.h: 36: ADCON0bits.CHS0 = 0;
  1524                           
  1525                           ;incstack = 0
  1526  000FB2  94C2               	bcf	4034,2,c	;volatile
  1527                           
  1528                           ;testeadc.h: 37: ADCON0bits.CHS1 = 0;
  1529  000FB4  96C2               	bcf	4034,3,c	;volatile
  1530                           
  1531                           ;testeadc.h: 38: ADCON0bits.CHS2 = 0;
  1532  000FB6  98C2               	bcf	4034,4,c	;volatile
  1533                           
  1534                           ;testeadc.h: 39: ADCON0bits.GO_DONE = 1;
  1535  000FB8  82C2               	bsf	4034,1,c	;volatile
  1536                           
  1537                           ;testeadc.h: 40: while(ADCON0bits.GO_DONE != 0);
  1538  000FBA  D000               	goto	l283
  1539  000FBC                     l283:
  1540  000FBC  B2C2               	btfsc	4034,1,c	;volatile
  1541  000FBE  D7FE               	goto	l283
  1542                           
  1543                           ;testeadc.h: 42: ADC[0] = ((unsigned char)ADRESL);
  1544  000FC0  CFC3 F001          	movff	4035,_ADC	;volatile
  1545  000FC4  6A02               	clrf	_ADC+1,c
  1546                           
  1547                           ;testeadc.h: 43: ADC[1] = ((unsigned char)ADRESH);
  1548  000FC6  CFC4 F003          	movff	4036,_ADC+2	;volatile
  1549  000FCA  6A04               	clrf	_ADC+3,c
  1550                           
  1551                           ;testeadc.h: 45: ADCON0bits.CHS0 = 1;
  1552  000FCC  84C2               	bsf	4034,2,c	;volatile
  1553                           
  1554                           ;testeadc.h: 46: ADCON0bits.CHS1 = 0;
  1555  000FCE  96C2               	bcf	4034,3,c	;volatile
  1556                           
  1557                           ;testeadc.h: 47: ADCON0bits.CHS2 = 0;
  1558  000FD0  98C2               	bcf	4034,4,c	;volatile
  1559                           
  1560                           ;testeadc.h: 48: ADCON0bits.GO_DONE = 1;
  1561  000FD2  82C2               	bsf	4034,1,c	;volatile
  1562                           
  1563                           ;testeadc.h: 49: while(ADCON0bits.GO_DONE != 0);
  1564  000FD4  D000               	goto	l286
  1565  000FD6                     l286:
  1566  000FD6  B2C2               	btfsc	4034,1,c	;volatile
  1567  000FD8  D7FE               	goto	l286
  1568                           
  1569                           ;testeadc.h: 51: ADC[2] = ((unsigned char)ADRESL);
  1570  000FDA  CFC3 F005          	movff	4035,_ADC+4	;volatile
  1571  000FDE  6A06               	clrf	_ADC+5,c
  1572                           
  1573                           ;testeadc.h: 52: ADC[3] = ((unsigned char)ADRESH);
  1574  000FE0  CFC4 F007          	movff	4036,_ADC+6	;volatile
  1575  000FE4  6A08               	clrf	_ADC+7,c
  1576                           
  1577                           ;testeadc.h: 55: ADCON0bits.CHS0 = 0;
  1578  000FE6  94C2               	bcf	4034,2,c	;volatile
  1579                           
  1580                           ;testeadc.h: 56: ADCON0bits.CHS1 = 1;
  1581  000FE8  86C2               	bsf	4034,3,c	;volatile
  1582                           
  1583                           ;testeadc.h: 57: ADCON0bits.CHS2 = 0;
  1584  000FEA  98C2               	bcf	4034,4,c	;volatile
  1585                           
  1586                           ;testeadc.h: 58: ADCON0bits.GO_DONE = 1;
  1587  000FEC  82C2               	bsf	4034,1,c	;volatile
  1588                           
  1589                           ;testeadc.h: 59: while(ADCON0bits.GO_DONE != 0);
  1590  000FEE  D000               	goto	l289
  1591  000FF0                     l289:
  1592  000FF0  B2C2               	btfsc	4034,1,c	;volatile
  1593  000FF2  D7FE               	goto	l289
  1594                           
  1595                           ;testeadc.h: 61: ADC[4] = ((unsigned char)ADRESL);
  1596  000FF4  CFC3 F009          	movff	4035,_ADC+8	;volatile
  1597  000FF8  6A0A               	clrf	_ADC+9,c
  1598                           
  1599                           ;testeadc.h: 62: ADC[5] = ((unsigned char)ADRESH);
  1600  000FFA  CFC4 F00B          	movff	4036,_ADC+10	;volatile
  1601  000FFE  6A0C               	clrf	_ADC+11,c
  1602                           
  1603                           ;testeadc.h: 65: ADCON0bits.CHS0 = 1;
  1604  001000  84C2               	bsf	4034,2,c	;volatile
  1605                           
  1606                           ;testeadc.h: 66: ADCON0bits.CHS1 = 1;
  1607  001002  86C2               	bsf	4034,3,c	;volatile
  1608                           
  1609                           ;testeadc.h: 67: ADCON0bits.CHS2 = 0;
  1610  001004  98C2               	bcf	4034,4,c	;volatile
  1611                           
  1612                           ;testeadc.h: 68: ADCON0bits.GO_DONE = 1;
  1613  001006  82C2               	bsf	4034,1,c	;volatile
  1614                           
  1615                           ;testeadc.h: 69: while(ADCON0bits.GO_DONE != 0);
  1616  001008  D000               	goto	l292
  1617  00100A                     l292:
  1618  00100A  B2C2               	btfsc	4034,1,c	;volatile
  1619  00100C  D7FE               	goto	l292
  1620                           
  1621                           ;testeadc.h: 71: ADC[6] = ((unsigned char)ADRESL);
  1622  00100E  CFC3 F00D          	movff	4035,_ADC+12	;volatile
  1623  001012  6A0E               	clrf	_ADC+13,c
  1624                           
  1625                           ;testeadc.h: 72: ADC[7] = ((unsigned char)ADRESH);
  1626  001014  CFC4 F00F          	movff	4036,_ADC+14	;volatile
  1627  001018  6A10               	clrf	_ADC+15,c
  1628                           
  1629                           ;testeadc.h: 75: ADCON0bits.CHS0 = 0;
  1630  00101A  94C2               	bcf	4034,2,c	;volatile
  1631                           
  1632                           ;testeadc.h: 76: ADCON0bits.CHS1 = 0;
  1633  00101C  96C2               	bcf	4034,3,c	;volatile
  1634                           
  1635                           ;testeadc.h: 77: ADCON0bits.CHS2 = 1;
  1636  00101E  88C2               	bsf	4034,4,c	;volatile
  1637                           
  1638                           ;testeadc.h: 78: ADCON0bits.GO_DONE = 1;
  1639  001020  82C2               	bsf	4034,1,c	;volatile
  1640                           
  1641                           ;testeadc.h: 79: while(ADCON0bits.GO_DONE != 0);
  1642  001022  D000               	goto	l295
  1643  001024                     l295:
  1644  001024  B2C2               	btfsc	4034,1,c	;volatile
  1645  001026  D7FE               	goto	l295
  1646                           
  1647                           ;testeadc.h: 82: ADC[8] = ((unsigned char)ADRESL);
  1648  001028  CFC3 F011          	movff	4035,_ADC+16	;volatile
  1649  00102C  6A12               	clrf	_ADC+17,c
  1650                           
  1651                           ;testeadc.h: 83: ADC[9] = ((unsigned char)ADRESH);
  1652  00102E  CFC4 F013          	movff	4036,_ADC+18	;volatile
  1653  001032  6A14               	clrf	_ADC+19,c
  1654                           
  1655                           ;testeadc.h: 84: return;
  1656  001034  0012               	return		;funcret
  1657  001036                     __end_of_StartADC:
  1658                           	opt stack 0
  1659                           tblptru	equ	0xFF8
  1660                           tblptrh	equ	0xFF7
  1661                           tblptrl	equ	0xFF6
  1662                           tablat	equ	0xFF5
  1663                           postinc0	equ	0xFEE
  1664                           wreg	equ	0xFE8
  1665                           postdec1	equ	0xFE5
  1666                           fsr1l	equ	0xFE1
  1667                           indf2	equ	0xFDF
  1668                           fsr2h	equ	0xFDA
  1669                           fsr2l	equ	0xFD9
  1670                           status	equ	0xFD8
  1671                           
  1672 ;; *************** function _SerialWifiWrite *****************
  1673 ;; Defined at:
  1674 ;;		line 78 in file "Serial.h"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  Valor           2    0[BANK0 ] PTR unsigned char 
  1677 ;;		 -> valoresEnviar(220), 
  1678 ;;  Tamanho         2    2[BANK0 ] unsigned int 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  i               2    4[BANK0 ] int 
  1681 ;; Return value:  Size  Location     Type
  1682 ;;		None               void
  1683 ;; Registers used:
  1684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1685 ;; Tracked objects:
  1686 ;;		On entry : 0/0
  1687 ;;		On exit  : 0/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1690 ;;      Params:         0       4       0       0       0       0       0       0       0
  1691 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1692 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1693 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1694 ;;Total ram usage:        6 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; Hardware stack levels required when called:    4
  1697 ;; This function calls:
  1698 ;;		_SerialPrint
  1699 ;; This function is called by:
  1700 ;;		_lerValores
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text3
  1705  001236                     __ptext3:
  1706                           	opt stack 0
  1707  001236                     _SerialWifiWrite:
  1708                           	opt stack 25
  1709                           
  1710                           ;Serial.h: 80: int i;
  1711                           ;Serial.h: 82: for (i = 0; i < Tamanho; ++i){
  1712                           
  1713                           ;incstack = 0
  1714  001236  0E00               	movlw	0
  1715  001238  0100               	movlb	0	; () banked
  1716  00123A  6FE0               	movwf	(SerialWifiWrite@i+1)& (0+255),b
  1717  00123C  0E00               	movlw	0
  1718  00123E  6FDF               	movwf	SerialWifiWrite@i& (0+255),b
  1719  001240  D011               	goto	l2350
  1720  001242                     l2346:
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;Serial.h: 83: SerialPrint(Valor[i]);
  1724  001242  0100               	movlb	0	; () banked
  1725  001244  51DF               	movf	SerialWifiWrite@i& (0+255),w,b
  1726  001246  0100               	movlb	0	; () banked
  1727  001248  25DB               	addwf	SerialWifiWrite@Valor& (0+255),w,b
  1728  00124A  6ED9               	movwf	fsr2l,c
  1729  00124C  0100               	movlb	0	; () banked
  1730  00124E  51E0               	movf	(SerialWifiWrite@i+1)& (0+255),w,b
  1731  001250  0100               	movlb	0	; () banked
  1732  001252  21DC               	addwfc	(SerialWifiWrite@Valor+1)& (0+255),w,b
  1733  001254  6EDA               	movwf	fsr2h,c
  1734  001256  50DF               	movf	indf2,w,c
  1735  001258  EC9E  F009         	call	_SerialPrint
  1736  00125C  0100               	movlb	0	; () banked
  1737  00125E  4BDF               	infsnz	SerialWifiWrite@i& (0+255),f,b
  1738  001260  2BE0               	incf	(SerialWifiWrite@i+1)& (0+255),f,b
  1739  001262  D000               	goto	l2350
  1740  001264                     l2350:
  1741                           
  1742                           ; BSR set to: 0
  1743  001264  0100               	movlb	0	; () banked
  1744  001266  51DD               	movf	SerialWifiWrite@Tamanho& (0+255),w,b
  1745  001268  0100               	movlb	0	; () banked
  1746  00126A  5DDF               	subwf	SerialWifiWrite@i& (0+255),w,b
  1747  00126C  0100               	movlb	0	; () banked
  1748  00126E  51DE               	movf	(SerialWifiWrite@Tamanho+1)& (0+255),w,b
  1749  001270  0100               	movlb	0	; () banked
  1750  001272  59E0               	subwfb	(SerialWifiWrite@i+1)& (0+255),w,b
  1751  001274  A0D8               	btfss	status,0,c
  1752  001276  D7E5               	goto	l2346
  1753                           
  1754                           ; BSR set to: 0
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;Serial.h: 84: }
  1758                           ;Serial.h: 86: return;
  1759  001278  0012               	return		;funcret
  1760  00127A                     __end_of_SerialWifiWrite:
  1761                           	opt stack 0
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           postdec1	equ	0xFE5
  1769                           fsr1l	equ	0xFE1
  1770                           indf2	equ	0xFDF
  1771                           fsr2h	equ	0xFDA
  1772                           fsr2l	equ	0xFD9
  1773                           status	equ	0xFD8
  1774                           
  1775 ;; *************** function _initUART *****************
  1776 ;; Defined at:
  1777 ;;		line 40 in file "Serial.h"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;		None
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;		None
  1782 ;; Return value:  Size  Location     Type
  1783 ;;		None               void
  1784 ;; Registers used:
  1785 ;;		wreg, status,2
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1791 ;;      Params:         0       0       0       0       0       0       0       0       0
  1792 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1793 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1794 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1795 ;;Total ram usage:        0 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    3
  1798 ;; This function calls:
  1799 ;;		Nothing
  1800 ;; This function is called by:
  1801 ;;		_main
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           	psect	text4
  1806  00127A                     __ptext4:
  1807                           	opt stack 0
  1808  00127A                     _initUART:
  1809                           	opt stack 27
  1810                           
  1811                           ;Serial.h: 42: TRISCbits.TRISC7 = 1;
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;incstack = 0
  1815  00127A  8E94               	bsf	3988,7,c	;volatile
  1816                           
  1817                           ;Serial.h: 43: TRISCbits.TRISC6 = 0;
  1818  00127C  9C94               	bcf	3988,6,c	;volatile
  1819                           
  1820                           ;Serial.h: 44: SPBRG = (unsigned char) (48000000/(16*115200) - 1);
  1821  00127E  0E19               	movlw	25
  1822  001280  6EAF               	movwf	4015,c	;volatile
  1823                           
  1824                           ;Serial.h: 45: SPBRGH = (unsigned char) (48000000/(16*115200) - 1);
  1825  001282  0E19               	movlw	25
  1826  001284  6EB0               	movwf	4016,c	;volatile
  1827                           
  1828                           ;Serial.h: 46: CSRC = 0;
  1829  001286  9EAC               	bcf	4012,7,c	;volatile
  1830                           
  1831                           ;Serial.h: 47: TX9 = 0;
  1832  001288  9CAC               	bcf	4012,6,c	;volatile
  1833                           
  1834                           ;Serial.h: 48: TXEN = 1;
  1835  00128A  8AAC               	bsf	4012,5,c	;volatile
  1836                           
  1837                           ;Serial.h: 49: SYNC = 0;
  1838  00128C  98AC               	bcf	4012,4,c	;volatile
  1839                           
  1840                           ;Serial.h: 50: SENDB = 0;
  1841  00128E  96AC               	bcf	4012,3,c	;volatile
  1842                           
  1843                           ;Serial.h: 51: BRGH = 1;
  1844  001290  84AC               	bsf	4012,2,c	;volatile
  1845                           
  1846                           ;Serial.h: 52: TRMT = 0;
  1847  001292  92AC               	bcf	4012,1,c	;volatile
  1848                           
  1849                           ;Serial.h: 53: TX9D = 0;
  1850  001294  90AC               	bcf	4012,0,c	;volatile
  1851                           
  1852                           ;Serial.h: 55: SPEN = 1;
  1853  001296  8EAB               	bsf	4011,7,c	;volatile
  1854                           
  1855                           ;Serial.h: 56: RX9 = 0;
  1856  001298  9CAB               	bcf	4011,6,c	;volatile
  1857                           
  1858                           ;Serial.h: 57: SREN = 0;
  1859  00129A  9AAB               	bcf	4011,5,c	;volatile
  1860                           
  1861                           ;Serial.h: 58: CREN = 1;
  1862  00129C  88AB               	bsf	4011,4,c	;volatile
  1863                           
  1864                           ;Serial.h: 59: ADDEN = 0;
  1865  00129E  96AB               	bcf	4011,3,c	;volatile
  1866                           
  1867                           ;Serial.h: 60: FERR = 0;
  1868  0012A0  94AB               	bcf	4011,2,c	;volatile
  1869                           
  1870                           ;Serial.h: 61: OERR = 0;
  1871  0012A2  92AB               	bcf	4011,1,c	;volatile
  1872                           
  1873                           ;Serial.h: 62: RX9D = 0;
  1874  0012A4  90AB               	bcf	4011,0,c	;volatile
  1875                           
  1876                           ;Serial.h: 63: TXIE = 0;
  1877  0012A6  989D               	bcf	3997,4,c	;volatile
  1878                           
  1879                           ;Serial.h: 64: RCIE = 1;
  1880  0012A8  8A9D               	bsf	3997,5,c	;volatile
  1881  0012AA  D000               	goto	l135
  1882  0012AC                     l135:
  1883  0012AC  0012               	return		;funcret
  1884  0012AE                     __end_of_initUART:
  1885                           	opt stack 0
  1886                           tblptru	equ	0xFF8
  1887                           tblptrh	equ	0xFF7
  1888                           tblptrl	equ	0xFF6
  1889                           tablat	equ	0xFF5
  1890                           postinc0	equ	0xFEE
  1891                           wreg	equ	0xFE8
  1892                           postdec1	equ	0xFE5
  1893                           fsr1l	equ	0xFE1
  1894                           indf2	equ	0xFDF
  1895                           fsr2h	equ	0xFDA
  1896                           fsr2l	equ	0xFD9
  1897                           status	equ	0xFD8
  1898                           
  1899 ;; *************** function _initPWM *****************
  1900 ;; Defined at:
  1901 ;;		line 108 in file "Interrup.h"
  1902 ;; Parameters:    Size  Location     Type
  1903 ;;		None
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;		None
  1906 ;; Return value:  Size  Location     Type
  1907 ;;		None               void
  1908 ;; Registers used:
  1909 ;;		wreg, status,2
  1910 ;; Tracked objects:
  1911 ;;		On entry : 0/0
  1912 ;;		On exit  : 0/0
  1913 ;;		Unchanged: 0/0
  1914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1915 ;;      Params:         0       0       0       0       0       0       0       0       0
  1916 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1917 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1918 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1919 ;;Total ram usage:        0 bytes
  1920 ;; Hardware stack levels used:    1
  1921 ;; Hardware stack levels required when called:    3
  1922 ;; This function calls:
  1923 ;;		Nothing
  1924 ;; This function is called by:
  1925 ;;		_main
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           	psect	text5
  1930  001350                     __ptext5:
  1931                           	opt stack 0
  1932  001350                     _initPWM:
  1933                           	opt stack 27
  1934                           
  1935                           ;Interrup.h: 109: INTCON = 0xA0;
  1936                           
  1937                           ;incstack = 0
  1938  001350  0EA0               	movlw	160
  1939  001352  6EF2               	movwf	intcon,c	;volatile
  1940                           
  1941                           ;Interrup.h: 112: T0CON = 0xC1;
  1942  001354  0EC1               	movlw	193
  1943  001356  6ED5               	movwf	4053,c	;volatile
  1944                           
  1945                           ;Interrup.h: 117: TRISB = 0x03;
  1946  001358  0E03               	movlw	3
  1947  00135A  6E93               	movwf	3987,c	;volatile
  1948                           
  1949                           ;Interrup.h: 119: TMR0L = freq;
  1950  00135C  C035  FFD6         	movff	_freq,4054	;volatile
  1951  001360  0012               	return		;funcret
  1952  001362                     __end_of_initPWM:
  1953                           	opt stack 0
  1954                           tblptru	equ	0xFF8
  1955                           tblptrh	equ	0xFF7
  1956                           tblptrl	equ	0xFF6
  1957                           tablat	equ	0xFF5
  1958                           intcon	equ	0xFF2
  1959                           postinc0	equ	0xFEE
  1960                           wreg	equ	0xFE8
  1961                           postdec1	equ	0xFE5
  1962                           fsr1l	equ	0xFE1
  1963                           indf2	equ	0xFDF
  1964                           fsr2h	equ	0xFDA
  1965                           fsr2l	equ	0xFD9
  1966                           status	equ	0xFD8
  1967                           
  1968 ;; *************** function _initADC *****************
  1969 ;; Defined at:
  1970 ;;		line 12 in file "testeadc.h"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;		None
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;		None
  1975 ;; Return value:  Size  Location     Type
  1976 ;;		None               void
  1977 ;; Registers used:
  1978 ;;		wreg, status,2
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1984 ;;      Params:         0       0       0       0       0       0       0       0       0
  1985 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1986 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1987 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1988 ;;Total ram usage:        0 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; Hardware stack levels required when called:    3
  1991 ;; This function calls:
  1992 ;;		Nothing
  1993 ;; This function is called by:
  1994 ;;		_main
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           	psect	text6
  1999  0012EE                     __ptext6:
  2000                           	opt stack 0
  2001  0012EE                     _initADC:
  2002                           	opt stack 27
  2003                           
  2004                           ;testeadc.h: 14: TRISA = 0xFF;
  2005                           
  2006                           ;incstack = 0
  2007  0012EE  6892               	setf	3986,c	;volatile
  2008                           
  2009                           ;testeadc.h: 22: ADCON0 = 0b00000001;
  2010  0012F0  0E01               	movlw	1
  2011  0012F2  6EC2               	movwf	4034,c	;volatile
  2012                           
  2013                           ;testeadc.h: 23: ADCON1 = 0;
  2014  0012F4  0E00               	movlw	0
  2015  0012F6  6EC1               	movwf	4033,c	;volatile
  2016                           
  2017                           ;testeadc.h: 24: ADCON1bits.PCFG3 = 1;
  2018  0012F8  86C1               	bsf	4033,3,c	;volatile
  2019                           
  2020                           ;testeadc.h: 25: ADCON1bits.PCFG2 = 0;
  2021  0012FA  94C1               	bcf	4033,2,c	;volatile
  2022                           
  2023                           ;testeadc.h: 26: ADCON1bits.PCFG1 = 1;
  2024  0012FC  82C1               	bsf	4033,1,c	;volatile
  2025                           
  2026                           ;testeadc.h: 27: ADCON1bits.PCFG0 = 0;
  2027  0012FE  90C1               	bcf	4033,0,c	;volatile
  2028                           
  2029                           ;testeadc.h: 28: ADCON2 = 0b00000000;
  2030  001300  0E00               	movlw	0
  2031  001302  6EC0               	movwf	4032,c	;volatile
  2032                           
  2033                           ;testeadc.h: 29: ADCON0bits.ADON = 0x01;
  2034  001304  80C2               	bsf	4034,0,c	;volatile
  2035  001306  D000               	goto	l280
  2036  001308                     l280:
  2037  001308  0012               	return		;funcret
  2038  00130A                     __end_of_initADC:
  2039                           	opt stack 0
  2040                           tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           tblptrl	equ	0xFF6
  2043                           tablat	equ	0xFF5
  2044                           intcon	equ	0xFF2
  2045                           postinc0	equ	0xFEE
  2046                           wreg	equ	0xFE8
  2047                           postdec1	equ	0xFE5
  2048                           fsr1l	equ	0xFE1
  2049                           indf2	equ	0xFDF
  2050                           fsr2h	equ	0xFDA
  2051                           fsr2l	equ	0xFD9
  2052                           status	equ	0xFD8
  2053                           
  2054 ;; *************** function _WifiTCPinit *****************
  2055 ;; Defined at:
  2056 ;;		line 24 in file "wifiTCP.h"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;		None
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;		None
  2061 ;; Return value:  Size  Location     Type
  2062 ;;		None               void
  2063 ;; Registers used:
  2064 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2070 ;;      Params:         0       0       0       0       0       0       0       0       0
  2071 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2072 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2073 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2074 ;;Total ram usage:        0 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    5
  2077 ;; This function calls:
  2078 ;;		_SerialWrite
  2079 ;;		_delaySeg
  2080 ;; This function is called by:
  2081 ;;		_main
  2082 ;; This function uses a non-reentrant model
  2083 ;;
  2084                           
  2085                           	psect	text7
  2086  000F22                     __ptext7:
  2087                           	opt stack 0
  2088  000F22                     _WifiTCPinit:
  2089                           	opt stack 25
  2090                           
  2091                           ;wifiTCP.h: 26: SerialWrite("AT+RST\r\n");
  2092                           
  2093                           ;incstack = 0
  2094  000F22  0EA5               	movlw	low STR_1
  2095  000F24  0100               	movlb	0	; () banked
  2096  000F26  6FDF               	movwf	SerialWrite@frase& (0+255),b
  2097  000F28  0E08               	movlw	high STR_1
  2098  000F2A  0100               	movlb	0	; () banked
  2099  000F2C  6FE0               	movwf	(SerialWrite@frase+1)& (0+255),b
  2100  000F2E  EC36  F007         	call	_SerialWrite	;wreg free
  2101                           
  2102                           ;wifiTCP.h: 27: delaySeg(2);
  2103  000F32  0E00               	movlw	0
  2104  000F34  6E4D               	movwf	delaySeg@waitTime+1,c
  2105  000F36  0E02               	movlw	2
  2106  000F38  6E4C               	movwf	delaySeg@waitTime,c
  2107  000F3A  ECC1  F008         	call	_delaySeg	;wreg free
  2108                           
  2109                           ;wifiTCP.h: 30: SerialWrite("AT+CWMODE=1\r\n");
  2110  000F3E  0E6F               	movlw	low STR_2
  2111  000F40  0100               	movlb	0	; () banked
  2112  000F42  6FDF               	movwf	SerialWrite@frase& (0+255),b
  2113  000F44  0E08               	movlw	high STR_2
  2114  000F46  0100               	movlb	0	; () banked
  2115  000F48  6FE0               	movwf	(SerialWrite@frase+1)& (0+255),b
  2116  000F4A  EC36  F007         	call	_SerialWrite	;wreg free
  2117                           
  2118                           ;wifiTCP.h: 31: delaySeg(2);
  2119  000F4E  0E00               	movlw	0
  2120  000F50  6E4D               	movwf	delaySeg@waitTime+1,c
  2121  000F52  0E02               	movlw	2
  2122  000F54  6E4C               	movwf	delaySeg@waitTime,c
  2123  000F56  ECC1  F008         	call	_delaySeg	;wreg free
  2124                           
  2125                           ;wifiTCP.h: 34: SerialWrite("AT+CWJAP=\"talkinghand\",\"tk123456\"\r\n");
  2126  000F5A  0E35               	movlw	low STR_3
  2127  000F5C  0100               	movlb	0	; () banked
  2128  000F5E  6FDF               	movwf	SerialWrite@frase& (0+255),b
  2129  000F60  0E08               	movlw	high STR_3
  2130  000F62  0100               	movlb	0	; () banked
  2131  000F64  6FE0               	movwf	(SerialWrite@frase+1)& (0+255),b
  2132  000F66  EC36  F007         	call	_SerialWrite	;wreg free
  2133                           
  2134                           ;wifiTCP.h: 35: delaySeg(8);
  2135  000F6A  0E00               	movlw	0
  2136  000F6C  6E4D               	movwf	delaySeg@waitTime+1,c
  2137  000F6E  0E08               	movlw	8
  2138  000F70  6E4C               	movwf	delaySeg@waitTime,c
  2139  000F72  ECC1  F008         	call	_delaySeg	;wreg free
  2140                           
  2141                           ;wifiTCP.h: 37: SerialWrite("AT+CIPMUX=1\r\n");
  2142  000F76  0E7D               	movlw	low STR_4
  2143  000F78  0100               	movlb	0	; () banked
  2144  000F7A  6FDF               	movwf	SerialWrite@frase& (0+255),b
  2145  000F7C  0E08               	movlw	high STR_4
  2146  000F7E  0100               	movlb	0	; () banked
  2147  000F80  6FE0               	movwf	(SerialWrite@frase+1)& (0+255),b
  2148  000F82  EC36  F007         	call	_SerialWrite	;wreg free
  2149                           
  2150                           ;wifiTCP.h: 38: delaySeg(2);
  2151  000F86  0E00               	movlw	0
  2152  000F88  6E4D               	movwf	delaySeg@waitTime+1,c
  2153  000F8A  0E02               	movlw	2
  2154  000F8C  6E4C               	movwf	delaySeg@waitTime,c
  2155  000F8E  ECC1  F008         	call	_delaySeg	;wreg free
  2156                           
  2157                           ;wifiTCP.h: 40: SerialWrite("AT+CIPSERVER=1,4000\r\n");
  2158  000F92  0E59               	movlw	low STR_5
  2159  000F94  0100               	movlb	0	; () banked
  2160  000F96  6FDF               	movwf	SerialWrite@frase& (0+255),b
  2161  000F98  0E08               	movlw	high STR_5
  2162  000F9A  0100               	movlb	0	; () banked
  2163  000F9C  6FE0               	movwf	(SerialWrite@frase+1)& (0+255),b
  2164  000F9E  EC36  F007         	call	_SerialWrite	;wreg free
  2165                           
  2166                           ;wifiTCP.h: 41: delaySeg(2);
  2167  000FA2  0E00               	movlw	0
  2168  000FA4  6E4D               	movwf	delaySeg@waitTime+1,c
  2169  000FA6  0E02               	movlw	2
  2170  000FA8  6E4C               	movwf	delaySeg@waitTime,c
  2171  000FAA  ECC1  F008         	call	_delaySeg	;wreg free
  2172  000FAE  D000               	goto	l263
  2173  000FB0                     l263:
  2174  000FB0  0012               	return		;funcret
  2175  000FB2                     __end_of_WifiTCPinit:
  2176                           	opt stack 0
  2177                           tblptru	equ	0xFF8
  2178                           tblptrh	equ	0xFF7
  2179                           tblptrl	equ	0xFF6
  2180                           tablat	equ	0xFF5
  2181                           intcon	equ	0xFF2
  2182                           postinc0	equ	0xFEE
  2183                           wreg	equ	0xFE8
  2184                           postdec1	equ	0xFE5
  2185                           fsr1l	equ	0xFE1
  2186                           indf2	equ	0xFDF
  2187                           fsr2h	equ	0xFDA
  2188                           fsr2l	equ	0xFD9
  2189                           status	equ	0xFD8
  2190                           
  2191 ;; *************** function _delaySeg *****************
  2192 ;; Defined at:
  2193 ;;		line 32 in file "Serial.h"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;  waitTime        2   18[COMRAM] unsigned int 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  i               2    3[BANK0 ] unsigned int 
  2198 ;;  j               2    1[BANK0 ] unsigned int 
  2199 ;; Return value:  Size  Location     Type
  2200 ;;		None               void
  2201 ;; Registers used:
  2202 ;;		wreg, status,2, status,0
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2208 ;;      Params:         2       0       0       0       0       0       0       0       0
  2209 ;;      Locals:         0       4       0       0       0       0       0       0       0
  2210 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2211 ;;      Totals:         2       5       0       0       0       0       0       0       0
  2212 ;;Total ram usage:        7 bytes
  2213 ;; Hardware stack levels used:    1
  2214 ;; Hardware stack levels required when called:    3
  2215 ;; This function calls:
  2216 ;;		Nothing
  2217 ;; This function is called by:
  2218 ;;		_WifiTCPinit
  2219 ;; This function uses a non-reentrant model
  2220 ;;
  2221                           
  2222                           	psect	text8
  2223  001182                     __ptext8:
  2224                           	opt stack 0
  2225  001182                     _delaySeg:
  2226                           	opt stack 26
  2227                           
  2228                           ;Serial.h: 34: for(unsigned j = 0; j < waitTime; ++j)
  2229                           
  2230                           ;incstack = 0
  2231  001182  0E00               	movlw	0
  2232  001184  0100               	movlb	0	; () banked
  2233  001186  6FDD               	movwf	(delaySeg@j+1)& (0+255),b
  2234  001188  0E00               	movlw	0
  2235  00118A  6FDC               	movwf	delaySeg@j& (0+255),b
  2236  00118C  D021               	goto	l2342
  2237  00118E                     l2330:
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;Serial.h: 35: for(unsigned i = 0; i <= 113; ++i)
  2241  00118E  0E00               	movlw	0
  2242  001190  0100               	movlb	0	; () banked
  2243  001192  6FDF               	movwf	(delaySeg@i+1)& (0+255),b
  2244  001194  0E00               	movlw	0
  2245  001196  6FDE               	movwf	delaySeg@i& (0+255),b
  2246  001198                     l2332:
  2247                           
  2248                           ; BSR set to: 0
  2249  001198  0100               	movlb	0	; () banked
  2250  00119A  51DF               	movf	(delaySeg@i+1)& (0+255),w,b
  2251  00119C  E115               	bnz	l2340
  2252  00119E  0E72               	movlw	114
  2253  0011A0  0100               	movlb	0	; () banked
  2254  0011A2  5DDE               	subwf	delaySeg@i& (0+255),w,b
  2255  0011A4  B0D8               	btfsc	status,0,c
  2256  0011A6  D010               	goto	l2340
  2257  0011A8  D001               	goto	l2336
  2258                           
  2259                           ; BSR set to: 0
  2260  0011AA  D00E               	goto	l2340
  2261  0011AC                     l2336:
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;Serial.h: 36: _delay((unsigned long)((10)*(48000000/4000.0)));
  2265  0011AC  0E9C               	movlw	156
  2266  0011AE  0100               	movlb	0	; () banked
  2267  0011B0  6FDB               	movwf	??_delaySeg& (0+255),b
  2268  0011B2  0ED7               	movlw	215
  2269  0011B4                     u2127:
  2270  0011B4  2EE8               	decfsz	wreg,f,c
  2271  0011B6  D7FE               	goto	u2127
  2272  0011B8  2FDB               	decfsz	??_delaySeg& (0+255),f,b
  2273  0011BA  D7FC               	goto	u2127
  2274  0011BC  F000               	nop	
  2275  0011BE  0100               	movlb	0	; () banked
  2276  0011C0  4BDE               	infsnz	delaySeg@i& (0+255),f,b
  2277  0011C2  2BDF               	incf	(delaySeg@i+1)& (0+255),f,b
  2278  0011C4  D7E9               	goto	l2332
  2279  0011C6  D000               	goto	l2340
  2280  0011C8                     l2340:
  2281                           
  2282                           ; BSR set to: 0
  2283  0011C8  0100               	movlb	0	; () banked
  2284  0011CA  4BDC               	infsnz	delaySeg@j& (0+255),f,b
  2285  0011CC  2BDD               	incf	(delaySeg@j+1)& (0+255),f,b
  2286  0011CE  D000               	goto	l2342
  2287  0011D0                     l2342:
  2288                           
  2289                           ; BSR set to: 0
  2290  0011D0  504C               	movf	delaySeg@waitTime,w,c
  2291  0011D2  0100               	movlb	0	; () banked
  2292  0011D4  5DDC               	subwf	delaySeg@j& (0+255),w,b
  2293  0011D6  504D               	movf	delaySeg@waitTime+1,w,c
  2294  0011D8  0100               	movlb	0	; () banked
  2295  0011DA  59DD               	subwfb	(delaySeg@j+1)& (0+255),w,b
  2296  0011DC  A0D8               	btfss	status,0,c
  2297  0011DE  D7D7               	goto	l2330
  2298                           
  2299                           ; BSR set to: 0
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;Serial.h: 37: return;
  2303  0011E0  0012               	return		;funcret
  2304  0011E2                     __end_of_delaySeg:
  2305                           	opt stack 0
  2306                           tblptru	equ	0xFF8
  2307                           tblptrh	equ	0xFF7
  2308                           tblptrl	equ	0xFF6
  2309                           tablat	equ	0xFF5
  2310                           intcon	equ	0xFF2
  2311                           postinc0	equ	0xFEE
  2312                           wreg	equ	0xFE8
  2313                           postdec1	equ	0xFE5
  2314                           fsr1l	equ	0xFE1
  2315                           indf2	equ	0xFDF
  2316                           fsr2h	equ	0xFDA
  2317                           fsr2l	equ	0xFD9
  2318                           status	equ	0xFD8
  2319                           
  2320 ;; *************** function _SerialWrite *****************
  2321 ;; Defined at:
  2322 ;;		line 89 in file "Serial.h"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  frase           2    4[BANK0 ] PTR const unsigned char 
  2325 ;;		 -> PicConfig@charSend(4), PicConfig@OkSend(5), STR_9(3), sendCmd(19), 
  2326 ;;		 -> STR_6(14), WifiTCPSend@newLine(3), STR_5(22), STR_4(14), 
  2327 ;;		 -> STR_3(36), STR_2(14), STR_1(9), 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  indice          1    9[BANK0 ] unsigned char 
  2330 ;;  tamanho         1    8[BANK0 ] unsigned char 
  2331 ;; Return value:  Size  Location     Type
  2332 ;;		None               void
  2333 ;; Registers used:
  2334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2335 ;; Tracked objects:
  2336 ;;		On entry : 0/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2340 ;;      Params:         0       2       0       0       0       0       0       0       0
  2341 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2342 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2343 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2344 ;;Total ram usage:        6 bytes
  2345 ;; Hardware stack levels used:    1
  2346 ;; Hardware stack levels required when called:    4
  2347 ;; This function calls:
  2348 ;;		_SerialPrint
  2349 ;;		_strlen
  2350 ;; This function is called by:
  2351 ;;		_WifiTCPinit
  2352 ;;		_lerValores
  2353 ;;		_WifiTCPSend
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	text9
  2358  000E6C                     __ptext9:
  2359                           	opt stack 0
  2360  000E6C                     _SerialWrite:
  2361                           	opt stack 25
  2362                           
  2363                           ;Serial.h: 91: unsigned char indice = 0;
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;incstack = 0
  2367  000E6C  0E00               	movlw	0
  2368  000E6E  0100               	movlb	0	; () banked
  2369  000E70  6FE4               	movwf	SerialWrite@indice& (0+255),b
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;Serial.h: 92: unsigned char tamanho = strlen(frase);
  2373  000E72  C0DF  F04C         	movff	SerialWrite@frase,strlen@s
  2374  000E76  C0E0  F04D         	movff	SerialWrite@frase+1,strlen@s+1
  2375  000E7A  EC90  F008         	call	_strlen	;wreg free
  2376  000E7E  504C               	movf	?_strlen,w,c
  2377  000E80  0100               	movlb	0	; () banked
  2378  000E82  6FE3               	movwf	SerialWrite@tamanho& (0+255),b
  2379                           
  2380                           ;Serial.h: 94: while(indice < tamanho){
  2381  000E84  D044               	goto	l2362
  2382  000E86                     l2356:
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;Serial.h: 97: if(frase[indice] != '\0')
  2386  000E86  0100               	movlb	0	; () banked
  2387  000E88  51E4               	movf	SerialWrite@indice& (0+255),w,b
  2388  000E8A  0D01               	mullw	1
  2389  000E8C  C0DF  F0E1         	movff	SerialWrite@frase,??_SerialWrite
  2390  000E90  C0E0  F0E2         	movff	SerialWrite@frase+1,??_SerialWrite+1
  2391  000E94  50F3               	movf	prodl,w,c
  2392  000E96  0100               	movlb	0	; () banked
  2393  000E98  27E1               	addwf	??_SerialWrite& (0+255),f,b
  2394  000E9A  50F4               	movf	prodh,w,c
  2395  000E9C  0100               	movlb	0	; () banked
  2396  000E9E  23E2               	addwfc	(??_SerialWrite+1)& (0+255),f,b
  2397  000EA0  C0E1  FFF6         	movff	??_SerialWrite,tblptrl
  2398  000EA4  C0E2  FFF7         	movff	??_SerialWrite+1,tblptrh
  2399  000EA8  6AF8               	clrf	tblptru,c
  2400  000EAA  0E07               	movlw	(high __ramtop+-1)
  2401  000EAC  64F7               	cpfsgt	tblptrh,c
  2402  000EAE  D003               	bra	u1727
  2403  000EB0  0008               	tblrd		*
  2404  000EB2  50F5               	movf	tablat,w,c
  2405  000EB4  D005               	bra	u1720
  2406  000EB6                     u1727:
  2407  000EB6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2408  000EBA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2409  000EBE  50EF               	movf	indf0,w,c
  2410  000EC0                     u1720:
  2411  000EC0  0900               	iorlw	0
  2412  000EC2  B4D8               	btfsc	status,2,c
  2413  000EC4  D02A               	goto	l154
  2414                           
  2415                           ;Serial.h: 98: {
  2416                           ;Serial.h: 99: SerialPrint(frase[indice]);
  2417  000EC6  0100               	movlb	0	; () banked
  2418  000EC8  51E4               	movf	SerialWrite@indice& (0+255),w,b
  2419  000ECA  0D01               	mullw	1
  2420  000ECC  C0DF  F0E1         	movff	SerialWrite@frase,??_SerialWrite
  2421  000ED0  C0E0  F0E2         	movff	SerialWrite@frase+1,??_SerialWrite+1
  2422  000ED4  50F3               	movf	prodl,w,c
  2423  000ED6  0100               	movlb	0	; () banked
  2424  000ED8  27E1               	addwf	??_SerialWrite& (0+255),f,b
  2425  000EDA  50F4               	movf	prodh,w,c
  2426  000EDC  0100               	movlb	0	; () banked
  2427  000EDE  23E2               	addwfc	(??_SerialWrite+1)& (0+255),f,b
  2428  000EE0  C0E1  FFF6         	movff	??_SerialWrite,tblptrl
  2429  000EE4  C0E2  FFF7         	movff	??_SerialWrite+1,tblptrh
  2430  000EE8  6AF8               	clrf	tblptru,c
  2431  000EEA  0E07               	movlw	(high __ramtop+-1)
  2432  000EEC  64F7               	cpfsgt	tblptrh,c
  2433  000EEE  D003               	bra	u1747
  2434  000EF0  0008               	tblrd		*
  2435  000EF2  50F5               	movf	tablat,w,c
  2436  000EF4  D005               	bra	u1740
  2437  000EF6                     u1747:
  2438  000EF6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2439  000EFA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2440  000EFE  50EF               	movf	indf0,w,c
  2441  000F00                     u1740:
  2442  000F00  EC9E  F009         	call	_SerialPrint
  2443                           
  2444                           ;Serial.h: 101: ++indice;
  2445  000F04  0100               	movlb	0	; () banked
  2446  000F06  2BE4               	incf	SerialWrite@indice& (0+255),f,b
  2447                           
  2448                           ;Serial.h: 102: }
  2449  000F08  D002               	goto	l2362
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;Serial.h: 103: else
  2453                           ;Serial.h: 104: break;
  2454  000F0A  D007               	goto	l154
  2455                           
  2456                           ; BSR set to: 0
  2457  000F0C  D000               	goto	l2362
  2458  000F0E                     l2362:
  2459                           
  2460                           ; BSR set to: 0
  2461  000F0E  0100               	movlb	0	; () banked
  2462  000F10  51E3               	movf	SerialWrite@tamanho& (0+255),w,b
  2463  000F12  0100               	movlb	0	; () banked
  2464  000F14  5DE4               	subwf	SerialWrite@indice& (0+255),w,b
  2465  000F16  A0D8               	btfss	status,0,c
  2466  000F18  D7B6               	goto	l2356
  2467  000F1A                     l154:
  2468                           
  2469                           ;Serial.h: 105: }
  2470                           ;Serial.h: 106: SerialLen = indice;
  2471  000F1A  C0E4  F031         	movff	SerialWrite@indice,_SerialLen
  2472  000F1E  6A32               	clrf	_SerialLen+1,c
  2473                           
  2474                           ;Serial.h: 107: return;
  2475  000F20  0012               	return		;funcret
  2476  000F22                     __end_of_SerialWrite:
  2477                           	opt stack 0
  2478                           tblptru	equ	0xFF8
  2479                           tblptrh	equ	0xFF7
  2480                           tblptrl	equ	0xFF6
  2481                           tablat	equ	0xFF5
  2482                           prodh	equ	0xFF4
  2483                           prodl	equ	0xFF3
  2484                           intcon	equ	0xFF2
  2485                           indf0	equ	0xFEF
  2486                           postinc0	equ	0xFEE
  2487                           fsr0h	equ	0xFEA
  2488                           fsr0l	equ	0xFE9
  2489                           wreg	equ	0xFE8
  2490                           postdec1	equ	0xFE5
  2491                           fsr1l	equ	0xFE1
  2492                           indf2	equ	0xFDF
  2493                           fsr2h	equ	0xFDA
  2494                           fsr2l	equ	0xFD9
  2495                           status	equ	0xFD8
  2496                           
  2497 ;; *************** function _strlen *****************
  2498 ;; Defined at:
  2499 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  s               2   18[COMRAM] PTR const unsigned char 
  2502 ;;		 -> STR_19(5), STR_18(5), STR_17(5), STR_16(5), 
  2503 ;;		 -> STR_15(5), STR_14(5), STR_13(5), STR_12(5), 
  2504 ;;		 -> STR_11(4), STR_10(5), PicConfig@charSend(4), PicConfig@OkSend(5), 
  2505 ;;		 -> STR_9(3), sendCmd(19), STR_8(3), STR_7(12), 
  2506 ;;		 -> STR_6(14), WifiTCPSend@newLine(3), STR_5(22), STR_4(14), 
  2507 ;;		 -> STR_3(36), STR_2(14), STR_1(9), SerialReceivedString(50), 
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
  2510 ;;		 -> STR_19(5), STR_18(5), STR_17(5), STR_16(5), 
  2511 ;;		 -> STR_15(5), STR_14(5), STR_13(5), STR_12(5), 
  2512 ;;		 -> STR_11(4), STR_10(5), PicConfig@charSend(4), PicConfig@OkSend(5), 
  2513 ;;		 -> STR_9(3), sendCmd(19), STR_8(3), STR_7(12), 
  2514 ;;		 -> STR_6(14), WifiTCPSend@newLine(3), STR_5(22), STR_4(14), 
  2515 ;;		 -> STR_3(36), STR_2(14), STR_1(9), SerialReceivedString(50), 
  2516 ;; Return value:  Size  Location     Type
  2517 ;;                  2   18[COMRAM] unsigned int 
  2518 ;; Registers used:
  2519 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 0/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2525 ;;      Params:         2       0       0       0       0       0       0       0       0
  2526 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2527 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2528 ;;      Totals:         2       4       0       0       0       0       0       0       0
  2529 ;;Total ram usage:        6 bytes
  2530 ;; Hardware stack levels used:    1
  2531 ;; Hardware stack levels required when called:    3
  2532 ;; This function calls:
  2533 ;;		Nothing
  2534 ;; This function is called by:
  2535 ;;		_SerialWrite
  2536 ;;		_ContainString
  2537 ;;		_stringToInt
  2538 ;;		_WifiTCPSend
  2539 ;;		_strstr
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543                           	psect	text10
  2544  001120                     __ptext10:
  2545                           	opt stack 0
  2546  001120                     _strlen:
  2547                           	opt stack 25
  2548                           
  2549                           ;incstack = 0
  2550  001120  C04C  F0DD         	movff	strlen@s,strlen@cp
  2551  001124  C04D  F0DE         	movff	strlen@s+1,strlen@cp+1
  2552  001128  D004               	goto	l2308
  2553  00112A                     l2306:
  2554  00112A  0100               	movlb	0	; () banked
  2555  00112C  4BDD               	infsnz	strlen@cp& (0+255),f,b
  2556  00112E  2BDE               	incf	(strlen@cp+1)& (0+255),f,b
  2557  001130  D000               	goto	l2308
  2558  001132                     l2308:
  2559  001132  C0DD  FFF6         	movff	strlen@cp,tblptrl
  2560  001136  C0DE  FFF7         	movff	strlen@cp+1,tblptrh
  2561  00113A  6AF8               	clrf	tblptru,c
  2562  00113C  0E07               	movlw	(high __ramtop+-1)
  2563  00113E  64F7               	cpfsgt	tblptrh,c
  2564  001140  D003               	bra	u1657
  2565  001142  0008               	tblrd		*
  2566  001144  50F5               	movf	tablat,w,c
  2567  001146  D005               	bra	u1650
  2568  001148                     u1657:
  2569  001148  CFF6 FFE9          	movff	tblptrl,fsr0l
  2570  00114C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2571  001150  50EF               	movf	indf0,w,c
  2572  001152                     u1650:
  2573  001152  0900               	iorlw	0
  2574  001154  A4D8               	btfss	status,2,c
  2575  001156  D7E9               	goto	l2306
  2576  001158  C04C  F0DB         	movff	strlen@s,??_strlen
  2577  00115C  C04D  F0DC         	movff	strlen@s+1,??_strlen+1
  2578  001160  0100               	movlb	0	; () banked
  2579  001162  1FDB               	comf	??_strlen& (0+255),f,b
  2580  001164  1FDC               	comf	(??_strlen+1)& (0+255),f,b
  2581  001166  4BDB               	infsnz	??_strlen& (0+255),f,b
  2582  001168  2BDC               	incf	(??_strlen+1)& (0+255),f,b
  2583  00116A  0100               	movlb	0	; () banked
  2584  00116C  51DD               	movf	strlen@cp& (0+255),w,b
  2585  00116E  0100               	movlb	0	; () banked
  2586  001170  25DB               	addwf	??_strlen& (0+255),w,b
  2587  001172  6E4C               	movwf	?_strlen,c
  2588  001174  0100               	movlb	0	; () banked
  2589  001176  51DE               	movf	(strlen@cp+1)& (0+255),w,b
  2590  001178  0100               	movlb	0	; () banked
  2591  00117A  21DC               	addwfc	(??_strlen+1)& (0+255),w,b
  2592  00117C  6E4D               	movwf	?_strlen+1,c
  2593  00117E  D000               	goto	l1062
  2594  001180                     l1062:
  2595                           
  2596                           ; BSR set to: 0
  2597  001180  0012               	return		;funcret
  2598  001182                     __end_of_strlen:
  2599                           	opt stack 0
  2600                           tblptru	equ	0xFF8
  2601                           tblptrh	equ	0xFF7
  2602                           tblptrl	equ	0xFF6
  2603                           tablat	equ	0xFF5
  2604                           prodh	equ	0xFF4
  2605                           prodl	equ	0xFF3
  2606                           intcon	equ	0xFF2
  2607                           indf0	equ	0xFEF
  2608                           postinc0	equ	0xFEE
  2609                           fsr0h	equ	0xFEA
  2610                           fsr0l	equ	0xFE9
  2611                           wreg	equ	0xFE8
  2612                           postdec1	equ	0xFE5
  2613                           fsr1l	equ	0xFE1
  2614                           indf2	equ	0xFDF
  2615                           fsr2h	equ	0xFDA
  2616                           fsr2l	equ	0xFD9
  2617                           status	equ	0xFD8
  2618                           
  2619 ;; *************** function _SerialPrint *****************
  2620 ;; Defined at:
  2621 ;;		line 69 in file "Serial.h"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;  byte            1    wreg     unsigned char 
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;  byte            1   18[COMRAM] unsigned char 
  2626 ;; Return value:  Size  Location     Type
  2627 ;;		None               void
  2628 ;; Registers used:
  2629 ;;		wreg
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/0
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2635 ;;      Params:         0       0       0       0       0       0       0       0       0
  2636 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2637 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2638 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2639 ;;Total ram usage:        1 bytes
  2640 ;; Hardware stack levels used:    1
  2641 ;; Hardware stack levels required when called:    3
  2642 ;; This function calls:
  2643 ;;		Nothing
  2644 ;; This function is called by:
  2645 ;;		_SerialWifiWrite
  2646 ;;		_SerialWrite
  2647 ;;		_WifiTCPSend
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           	psect	text11
  2652  00133C                     __ptext11:
  2653                           	opt stack 0
  2654  00133C                     _SerialPrint:
  2655                           	opt stack 25
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;incstack = 0
  2659                           ;SerialPrint@byte stored from wreg
  2660  00133C  6E4C               	movwf	SerialPrint@byte,c
  2661                           
  2662                           ;Serial.h: 71: while(!TXIF);
  2663  00133E  D000               	goto	l138
  2664  001340                     l138:
  2665  001340  A89E               	btfss	3998,4,c	;volatile
  2666  001342  D7FE               	goto	l138
  2667                           
  2668                           ;Serial.h: 72: TXREG = byte;
  2669  001344  C04C  FFAD         	movff	SerialPrint@byte,4013	;volatile
  2670                           
  2671                           ;Serial.h: 73: RCIF = 0;
  2672  001348  9A9E               	bcf	3998,5,c	;volatile
  2673                           
  2674                           ;Serial.h: 74: OERR = 0;
  2675  00134A  92AB               	bcf	4011,1,c	;volatile
  2676  00134C  D000               	goto	l141
  2677  00134E                     l141:
  2678  00134E  0012               	return		;funcret
  2679  001350                     __end_of_SerialPrint:
  2680                           	opt stack 0
  2681                           tblptru	equ	0xFF8
  2682                           tblptrh	equ	0xFF7
  2683                           tblptrl	equ	0xFF6
  2684                           tablat	equ	0xFF5
  2685                           prodh	equ	0xFF4
  2686                           prodl	equ	0xFF3
  2687                           intcon	equ	0xFF2
  2688                           indf0	equ	0xFEF
  2689                           postinc0	equ	0xFEE
  2690                           fsr0h	equ	0xFEA
  2691                           fsr0l	equ	0xFE9
  2692                           wreg	equ	0xFE8
  2693                           postdec1	equ	0xFE5
  2694                           fsr1l	equ	0xFE1
  2695                           indf2	equ	0xFDF
  2696                           fsr2h	equ	0xFDA
  2697                           fsr2l	equ	0xFD9
  2698                           status	equ	0xFD8
  2699                           
  2700 ;; *************** function _Interrupt *****************
  2701 ;; Defined at:
  2702 ;;		line 45 in file "Interrup.h"
  2703 ;; Parameters:    Size  Location     Type
  2704 ;;		None
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;		None
  2707 ;; Return value:  Size  Location     Type
  2708 ;;		None               void
  2709 ;; Registers used:
  2710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2716 ;;      Params:         0       0       0       0       0       0       0       0       0
  2717 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2718 ;;      Temps:         14       0       0       0       0       0       0       0       0
  2719 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2720 ;;Total ram usage:       14 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    2
  2723 ;; This function calls:
  2724 ;;		_SerialReadUntilToken
  2725 ;;		_pwmExecute
  2726 ;;		_waitToken
  2727 ;; This function is called by:
  2728 ;;		Interrupt level 2
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           	psect	intcode
  2733  000808                     __pintcode:
  2734                           	opt stack 0
  2735  000808                     _Interrupt:
  2736                           	opt stack 25
  2737                           
  2738                           ;incstack = 0
  2739  000808  CFFA F03E          	movff	pclath,??_Interrupt
  2740  00080C  CFFB F03F          	movff	pclatu,??_Interrupt+1
  2741  000810  CFE9 F040          	movff	fsr0l,??_Interrupt+2
  2742  000814  ED69  F006         	call	int_func,f	;refresh shadow registers
  2743                           pclatu	equ	0xFFB
  2744                           pclath	equ	0xFFA
  2745                           tblptru	equ	0xFF8
  2746                           tblptrh	equ	0xFF7
  2747                           tblptrl	equ	0xFF6
  2748                           tablat	equ	0xFF5
  2749                           prodh	equ	0xFF4
  2750                           prodl	equ	0xFF3
  2751                           intcon	equ	0xFF2
  2752                           indf0	equ	0xFEF
  2753                           postinc0	equ	0xFEE
  2754                           fsr0h	equ	0xFEA
  2755                           fsr0l	equ	0xFE9
  2756                           wreg	equ	0xFE8
  2757                           postdec1	equ	0xFE5
  2758                           fsr1l	equ	0xFE1
  2759                           indf2	equ	0xFDF
  2760                           fsr2h	equ	0xFDA
  2761                           fsr2l	equ	0xFD9
  2762                           status	equ	0xFD8
  2763                           
  2764                           	psect	intcode_body
  2765  000CD2                     __pintcode_body:
  2766                           	opt stack 25
  2767  000CD2                     int_func:
  2768                           	opt stack 25
  2769  000CD2  0006               	pop		; remove dummy address from shadow register refresh
  2770  000CD4  CFEA F041          	movff	fsr0h,??_Interrupt+3
  2771  000CD8  CFE1 F042          	movff	fsr1l,??_Interrupt+4
  2772  000CDC  CFE2 F043          	movff	fsr1h,??_Interrupt+5
  2773  000CE0  CFD9 F044          	movff	fsr2l,??_Interrupt+6
  2774  000CE4  CFDA F045          	movff	fsr2h,??_Interrupt+7
  2775  000CE8  CFF3 F046          	movff	prodl,??_Interrupt+8
  2776  000CEC  CFF4 F047          	movff	prodh,??_Interrupt+9
  2777  000CF0  CFF6 F048          	movff	tblptrl,??_Interrupt+10
  2778  000CF4  CFF7 F049          	movff	tblptrh,??_Interrupt+11
  2779  000CF8  CFF8 F04A          	movff	tblptru,??_Interrupt+12
  2780  000CFC  CFF5 F04B          	movff	tablat,??_Interrupt+13
  2781                           
  2782                           ;Interrup.h: 46: if(INTCONbits.TMR0IF) {
  2783  000D00  A4F2               	btfss	intcon,2,c	;volatile
  2784  000D02  D006               	goto	i2l2050
  2785                           
  2786                           ;Interrup.h: 49: INTCONbits.TMR0IF = 0;
  2787  000D04  94F2               	bcf	intcon,2,c	;volatile
  2788                           
  2789                           ;Interrup.h: 50: TMR0L = freq;
  2790  000D06  C035  FFD6         	movff	_freq,4054	;volatile
  2791                           
  2792                           ;Interrup.h: 51: pwmExecute();
  2793  000D0A  EC1B  F008         	call	_pwmExecute	;wreg free
  2794  000D0E  D000               	goto	i2l2050
  2795  000D10                     i2l2050:
  2796                           
  2797                           ;Interrup.h: 52: }
  2798                           ;Interrup.h: 53: if(PIR1bits.RCIF){
  2799  000D10  AA9E               	btfss	3998,5,c	;volatile
  2800  000D12  D08F               	goto	i2l235
  2801                           
  2802                           ;Interrup.h: 55: PIR1bits.RCIF = 0;
  2803  000D14  9A9E               	bcf	3998,5,c	;volatile
  2804                           
  2805                           ;Interrup.h: 57: if(waitToken('_'))
  2806  000D16  0E5F               	movlw	95
  2807  000D18  EC57  F009         	call	_waitToken
  2808  000D1C  A0D8               	btfss	status,0,c
  2809  000D1E  D089               	goto	i2l235
  2810                           
  2811                           ;Interrup.h: 58: {
  2812                           ;Interrup.h: 59: SerialReadUntilToken('_');
  2813  000D20  0E5F               	movlw	95
  2814  000D22  ECF1  F008         	call	_SerialReadUntilToken
  2815                           
  2816                           ;Interrup.h: 62: if(SerialReceivedString[0] == '1'){
  2817  000D26  0E31               	movlw	49
  2818  000D28  0100               	movlb	0	; () banked
  2819  000D2A  19A9               	xorwf	_SerialReceivedString& (0+255),w,b
  2820  000D2C  A4D8               	btfss	status,2,c
  2821  000D2E  D004               	goto	i2l224
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;Interrup.h: 63: _pwm[0]+=5;
  2825  000D30  0E05               	movlw	5
  2826  000D32  2620               	addwf	__pwm,f,c
  2827  000D34  0E00               	movlw	0
  2828  000D36  2221               	addwfc	__pwm+1,f,c
  2829  000D38                     i2l224:
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;Interrup.h: 64: }
  2833                           ;Interrup.h: 65: if(SerialReceivedString[0] == '0'){
  2834  000D38  0E30               	movlw	48
  2835  000D3A  0100               	movlb	0	; () banked
  2836  000D3C  19A9               	xorwf	_SerialReceivedString& (0+255),w,b
  2837  000D3E  A4D8               	btfss	status,2,c
  2838  000D40  D004               	goto	i2l225
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;Interrup.h: 66: _pwm[0]-=5;
  2842  000D42  0EFB               	movlw	251
  2843  000D44  2620               	addwf	__pwm,f,c
  2844  000D46  0EFF               	movlw	255
  2845  000D48  2221               	addwfc	__pwm+1,f,c
  2846  000D4A                     i2l225:
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;Interrup.h: 67: }
  2850                           ;Interrup.h: 68: if(SerialReceivedString[0] == '3'){
  2851  000D4A  0E33               	movlw	51
  2852  000D4C  0100               	movlb	0	; () banked
  2853  000D4E  19A9               	xorwf	_SerialReceivedString& (0+255),w,b
  2854  000D50  A4D8               	btfss	status,2,c
  2855  000D52  D004               	goto	i2l226
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;Interrup.h: 69: _pwm[1]+=5;
  2859  000D54  0E05               	movlw	5
  2860  000D56  2622               	addwf	__pwm+2,f,c
  2861  000D58  0E00               	movlw	0
  2862  000D5A  2223               	addwfc	__pwm+3,f,c
  2863  000D5C                     i2l226:
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;Interrup.h: 70: }
  2867                           ;Interrup.h: 71: if(SerialReceivedString[0] == '2'){
  2868  000D5C  0E32               	movlw	50
  2869  000D5E  0100               	movlb	0	; () banked
  2870  000D60  19A9               	xorwf	_SerialReceivedString& (0+255),w,b
  2871  000D62  A4D8               	btfss	status,2,c
  2872  000D64  D004               	goto	i2l227
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;Interrup.h: 72: _pwm[1]-=5;
  2876  000D66  0EFB               	movlw	251
  2877  000D68  2622               	addwf	__pwm+2,f,c
  2878  000D6A  0EFF               	movlw	255
  2879  000D6C  2223               	addwfc	__pwm+3,f,c
  2880  000D6E                     i2l227:
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;Interrup.h: 73: }
  2884                           ;Interrup.h: 74: if(SerialReceivedString[0] == '5'){
  2885  000D6E  0E35               	movlw	53
  2886  000D70  0100               	movlb	0	; () banked
  2887  000D72  19A9               	xorwf	_SerialReceivedString& (0+255),w,b
  2888  000D74  A4D8               	btfss	status,2,c
  2889  000D76  D004               	goto	i2l228
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;Interrup.h: 75: _pwm[2]+=5;
  2893  000D78  0E05               	movlw	5
  2894  000D7A  2624               	addwf	__pwm+4,f,c
  2895  000D7C  0E00               	movlw	0
  2896  000D7E  2225               	addwfc	__pwm+5,f,c
  2897  000D80                     i2l228:
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;Interrup.h: 76: }
  2901                           ;Interrup.h: 77: if(SerialReceivedString[0] == '4'){
  2902  000D80  0E34               	movlw	52
  2903  000D82  0100               	movlb	0	; () banked
  2904  000D84  19A9               	xorwf	_SerialReceivedString& (0+255),w,b
  2905  000D86  A4D8               	btfss	status,2,c
  2906  000D88  D004               	goto	i2l229
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;Interrup.h: 78: _pwm[2]-=5;
  2910  000D8A  0EFB               	movlw	251
  2911  000D8C  2624               	addwf	__pwm+4,f,c
  2912  000D8E  0EFF               	movlw	255
  2913  000D90  2225               	addwfc	__pwm+5,f,c
  2914  000D92                     i2l229:
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;Interrup.h: 79: }
  2918                           ;Interrup.h: 80: if(SerialReceivedString[0] == '7'){
  2919  000D92  0E37               	movlw	55
  2920  000D94  0100               	movlb	0	; () banked
  2921  000D96  19A9               	xorwf	_SerialReceivedString& (0+255),w,b
  2922  000D98  A4D8               	btfss	status,2,c
  2923  000D9A  D004               	goto	i2l230
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;Interrup.h: 81: _pwm[3]+=5;
  2927  000D9C  0E05               	movlw	5
  2928  000D9E  2626               	addwf	__pwm+6,f,c
  2929  000DA0  0E00               	movlw	0
  2930  000DA2  2227               	addwfc	__pwm+7,f,c
  2931  000DA4                     i2l230:
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;Interrup.h: 82: }
  2935                           ;Interrup.h: 83: if(SerialReceivedString[0] == '6'){
  2936  000DA4  0E36               	movlw	54
  2937  000DA6  0100               	movlb	0	; () banked
  2938  000DA8  19A9               	xorwf	_SerialReceivedString& (0+255),w,b
  2939  000DAA  A4D8               	btfss	status,2,c
  2940  000DAC  D004               	goto	i2l231
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;Interrup.h: 84: _pwm[3]-=5;
  2944  000DAE  0EFB               	movlw	251
  2945  000DB0  2626               	addwf	__pwm+6,f,c
  2946  000DB2  0EFF               	movlw	255
  2947  000DB4  2227               	addwfc	__pwm+7,f,c
  2948  000DB6                     i2l231:
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;Interrup.h: 85: }
  2952                           ;Interrup.h: 86: if(SerialReceivedString[0] == 't'){
  2953  000DB6  0E74               	movlw	116
  2954  000DB8  0100               	movlb	0	; () banked
  2955  000DBA  19A9               	xorwf	_SerialReceivedString& (0+255),w,b
  2956  000DBC  A4D8               	btfss	status,2,c
  2957  000DBE  D00D               	goto	i2l2078
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;Interrup.h: 87: _pwm[0]=255;
  2961  000DC0  0E00               	movlw	0
  2962  000DC2  6E21               	movwf	__pwm+1,c
  2963  000DC4  6820               	setf	__pwm,c
  2964                           
  2965                           ;Interrup.h: 88: _pwm[1]=255;
  2966  000DC6  0E00               	movlw	0
  2967  000DC8  6E23               	movwf	__pwm+3,c
  2968  000DCA  6822               	setf	__pwm+2,c
  2969                           
  2970                           ;Interrup.h: 89: _pwm[2]=255;
  2971  000DCC  0E00               	movlw	0
  2972  000DCE  6E25               	movwf	__pwm+5,c
  2973  000DD0  6824               	setf	__pwm+4,c
  2974                           
  2975                           ;Interrup.h: 90: _pwm[3]=255;
  2976  000DD2  0E00               	movlw	0
  2977  000DD4  6E27               	movwf	__pwm+7,c
  2978  000DD6  6826               	setf	__pwm+6,c
  2979  000DD8  D000               	goto	i2l2078
  2980  000DDA                     i2l2078:
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;Interrup.h: 91: }
  2984                           ;Interrup.h: 92: if(SerialReceivedString[0] == 'g'){
  2985  000DDA  0E67               	movlw	103
  2986  000DDC  0100               	movlb	0	; () banked
  2987  000DDE  19A9               	xorwf	_SerialReceivedString& (0+255),w,b
  2988  000DE0  A4D8               	btfss	status,2,c
  2989  000DE2  D011               	goto	i2l2082
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;Interrup.h: 93: _pwm[0]=150;
  2993  000DE4  0E00               	movlw	0
  2994  000DE6  6E21               	movwf	__pwm+1,c
  2995  000DE8  0E96               	movlw	150
  2996  000DEA  6E20               	movwf	__pwm,c
  2997                           
  2998                           ;Interrup.h: 94: _pwm[1]=150;
  2999  000DEC  0E00               	movlw	0
  3000  000DEE  6E23               	movwf	__pwm+3,c
  3001  000DF0  0E96               	movlw	150
  3002  000DF2  6E22               	movwf	__pwm+2,c
  3003                           
  3004                           ;Interrup.h: 95: _pwm[2]=150;
  3005  000DF4  0E00               	movlw	0
  3006  000DF6  6E25               	movwf	__pwm+5,c
  3007  000DF8  0E96               	movlw	150
  3008  000DFA  6E24               	movwf	__pwm+4,c
  3009                           
  3010                           ;Interrup.h: 96: _pwm[3]=150;
  3011  000DFC  0E00               	movlw	0
  3012  000DFE  6E27               	movwf	__pwm+7,c
  3013  000E00  0E96               	movlw	150
  3014  000E02  6E26               	movwf	__pwm+6,c
  3015  000E04  D000               	goto	i2l2082
  3016  000E06                     i2l2082:
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;Interrup.h: 97: }
  3020                           ;Interrup.h: 98: if(SerialReceivedString[0] == 'b'){
  3021  000E06  0E62               	movlw	98
  3022  000E08  0100               	movlb	0	; () banked
  3023  000E0A  19A9               	xorwf	_SerialReceivedString& (0+255),w,b
  3024  000E0C  A4D8               	btfss	status,2,c
  3025  000E0E  D011               	goto	i2l235
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;Interrup.h: 99: _pwm[0]=1;
  3029  000E10  0E00               	movlw	0
  3030  000E12  6E21               	movwf	__pwm+1,c
  3031  000E14  0E01               	movlw	1
  3032  000E16  6E20               	movwf	__pwm,c
  3033                           
  3034                           ;Interrup.h: 100: _pwm[1]=1;
  3035  000E18  0E00               	movlw	0
  3036  000E1A  6E23               	movwf	__pwm+3,c
  3037  000E1C  0E01               	movlw	1
  3038  000E1E  6E22               	movwf	__pwm+2,c
  3039                           
  3040                           ;Interrup.h: 101: _pwm[2]=1;
  3041  000E20  0E00               	movlw	0
  3042  000E22  6E25               	movwf	__pwm+5,c
  3043  000E24  0E01               	movlw	1
  3044  000E26  6E24               	movwf	__pwm+4,c
  3045                           
  3046                           ;Interrup.h: 102: _pwm[3]=1;
  3047  000E28  0E00               	movlw	0
  3048  000E2A  6E27               	movwf	__pwm+7,c
  3049  000E2C  0E01               	movlw	1
  3050  000E2E  6E26               	movwf	__pwm+6,c
  3051                           
  3052                           ; BSR set to: 0
  3053                           
  3054                           ; BSR set to: 0
  3055  000E30  D000               	goto	i2l235
  3056  000E32                     i2l235:
  3057  000E32  C04B  FFF5         	movff	??_Interrupt+13,tablat
  3058  000E36  C04A  FFF8         	movff	??_Interrupt+12,tblptru
  3059  000E3A  C049  FFF7         	movff	??_Interrupt+11,tblptrh
  3060  000E3E  C048  FFF6         	movff	??_Interrupt+10,tblptrl
  3061  000E42  C047  FFF4         	movff	??_Interrupt+9,prodh
  3062  000E46  C046  FFF3         	movff	??_Interrupt+8,prodl
  3063  000E4A  C045  FFDA         	movff	??_Interrupt+7,fsr2h
  3064  000E4E  C044  FFD9         	movff	??_Interrupt+6,fsr2l
  3065  000E52  C043  FFE2         	movff	??_Interrupt+5,fsr1h
  3066  000E56  C042  FFE1         	movff	??_Interrupt+4,fsr1l
  3067  000E5A  C041  FFEA         	movff	??_Interrupt+3,fsr0h
  3068  000E5E  C040  FFE9         	movff	??_Interrupt+2,fsr0l
  3069  000E62  C03F  FFFB         	movff	??_Interrupt+1,pclatu
  3070  000E66  C03E  FFFA         	movff	??_Interrupt,pclath
  3071  000E6A  0011               	retfie		f
  3072  000E6C                     __end_of_Interrupt:
  3073                           	opt stack 0
  3074                           pclatu	equ	0xFFB
  3075                           pclath	equ	0xFFA
  3076                           tblptru	equ	0xFF8
  3077                           tblptrh	equ	0xFF7
  3078                           tblptrl	equ	0xFF6
  3079                           tablat	equ	0xFF5
  3080                           prodh	equ	0xFF4
  3081                           prodl	equ	0xFF3
  3082                           intcon	equ	0xFF2
  3083                           indf0	equ	0xFEF
  3084                           postinc0	equ	0xFEE
  3085                           fsr0h	equ	0xFEA
  3086                           fsr0l	equ	0xFE9
  3087                           wreg	equ	0xFE8
  3088                           postdec1	equ	0xFE5
  3089                           fsr1h	equ	0xFE2
  3090                           fsr1l	equ	0xFE1
  3091                           indf2	equ	0xFDF
  3092                           fsr2h	equ	0xFDA
  3093                           fsr2l	equ	0xFD9
  3094                           status	equ	0xFD8
  3095                           
  3096 ;; *************** function _waitToken *****************
  3097 ;; Defined at:
  3098 ;;		line 150 in file "Serial.h"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;  value           1    wreg     unsigned char 
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;  value           1    0[COMRAM] unsigned char 
  3103 ;; Return value:  Size  Location     Type
  3104 ;;		None               void
  3105 ;; Registers used:
  3106 ;;		wreg, status,2, status,0, cstack
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3112 ;;      Params:         0       0       0       0       0       0       0       0       0
  3113 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3114 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3115 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3116 ;;Total ram usage:        1 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; Hardware stack levels required when called:    1
  3119 ;; This function calls:
  3120 ;;		_SerialRead
  3121 ;; This function is called by:
  3122 ;;		_Interrupt
  3123 ;;		_WifiTCPRead
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           	psect	text13
  3128  0012AE                     __ptext13:
  3129                           	opt stack 0
  3130  0012AE                     _waitToken:
  3131                           	opt stack 25
  3132                           
  3133                           ;incstack = 0
  3134                           ;waitToken@value stored from wreg
  3135  0012AE  6E3A               	movwf	waitToken@value,c
  3136                           
  3137                           ;Serial.h: 153: if(!RCIF)
  3138  0012B0  BA9E               	btfsc	3998,5,c	;volatile
  3139  0012B2  D002               	goto	i2l1844
  3140  0012B4  D00A               	goto	i2l1854
  3141                           
  3142                           ;Serial.h: 154: return 0;
  3143  0012B6  D00B               	goto	i2l179
  3144  0012B8                     i2l1844:
  3145                           
  3146                           ;Serial.h: 156: if((SerialRead() == value)){
  3147  0012B8  EC85  F009         	call	_SerialRead	;wreg free
  3148  0012BC  183A               	xorwf	waitToken@value,w,c
  3149  0012BE  A4D8               	btfss	status,2,c
  3150  0012C0  D004               	goto	i2l1854
  3151                           
  3152                           ;Serial.h: 157: RCREG = value+1;
  3153  0012C2  283A               	incf	waitToken@value,w,c
  3154  0012C4  6EAE               	movwf	4014,c	;volatile
  3155                           
  3156                           ;Serial.h: 158: return 1;
  3157  0012C6  80D8               	bsf	status,0,c
  3158                           
  3159                           ;Serial.h: 159: }
  3160  0012C8  D002               	goto	i2l179
  3161  0012CA                     i2l1854:
  3162                           
  3163                           ;Serial.h: 160: else
  3164                           ;Serial.h: 161: return 0;
  3165  0012CA  90D8               	bcf	status,0,c
  3166  0012CC  D000               	goto	i2l179
  3167  0012CE                     i2l179:
  3168  0012CE  0012               	return		;funcret
  3169  0012D0                     __end_of_waitToken:
  3170                           	opt stack 0
  3171                           pclatu	equ	0xFFB
  3172                           pclath	equ	0xFFA
  3173                           tblptru	equ	0xFF8
  3174                           tblptrh	equ	0xFF7
  3175                           tblptrl	equ	0xFF6
  3176                           tablat	equ	0xFF5
  3177                           prodh	equ	0xFF4
  3178                           prodl	equ	0xFF3
  3179                           intcon	equ	0xFF2
  3180                           indf0	equ	0xFEF
  3181                           postinc0	equ	0xFEE
  3182                           fsr0h	equ	0xFEA
  3183                           fsr0l	equ	0xFE9
  3184                           wreg	equ	0xFE8
  3185                           postdec1	equ	0xFE5
  3186                           fsr1h	equ	0xFE2
  3187                           fsr1l	equ	0xFE1
  3188                           indf2	equ	0xFDF
  3189                           fsr2h	equ	0xFDA
  3190                           fsr2l	equ	0xFD9
  3191                           status	equ	0xFD8
  3192                           
  3193 ;; *************** function _pwmExecute *****************
  3194 ;; Defined at:
  3195 ;;		line 21 in file "Interrup.h"
  3196 ;; Parameters:    Size  Location     Type
  3197 ;;		None
  3198 ;; Auto vars:     Size  Location     Type
  3199 ;;		None
  3200 ;; Return value:  Size  Location     Type
  3201 ;;		None               void
  3202 ;; Registers used:
  3203 ;;		wreg, status,2, status,0
  3204 ;; Tracked objects:
  3205 ;;		On entry : 0/0
  3206 ;;		On exit  : 0/0
  3207 ;;		Unchanged: 0/0
  3208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3209 ;;      Params:         0       0       0       0       0       0       0       0       0
  3210 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3211 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3212 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3213 ;;Total ram usage:        2 bytes
  3214 ;; Hardware stack levels used:    1
  3215 ;; This function calls:
  3216 ;;		Nothing
  3217 ;; This function is called by:
  3218 ;;		_Interrupt
  3219 ;; This function uses a non-reentrant model
  3220 ;;
  3221                           
  3222                           	psect	text14
  3223  001036                     __ptext14:
  3224                           	opt stack 0
  3225  001036                     _pwmExecute:
  3226                           	opt stack 26
  3227                           
  3228                           ;Interrup.h: 23: counter++;
  3229                           
  3230                           ;incstack = 0
  3231  001036  2A1F               	incf	_counter,f,c
  3232                           
  3233                           ;Interrup.h: 25: if(counter == _pwm[0]){
  3234  001038  501F               	movf	_counter,w,c
  3235  00103A  6E3A               	movwf	??_pwmExecute& (0+255),c
  3236  00103C  6A3B               	clrf	(??_pwmExecute+1)& (0+255),c
  3237  00103E  5020               	movf	__pwm,w,c
  3238  001040  183A               	xorwf	??_pwmExecute,w,c
  3239  001042  E106               	bnz	i2l1874
  3240  001044  5021               	movf	__pwm+1,w,c
  3241  001046  183B               	xorwf	??_pwmExecute+1,w,c
  3242  001048  A4D8               	btfss	status,2,c
  3243  00104A  D002               	goto	i2l1874
  3244                           
  3245                           ;Interrup.h: 26: PORTB &= 0b11111011;
  3246  00104C  9481               	bcf	3969,2,c	;volatile
  3247  00104E  D000               	goto	i2l1874
  3248  001050                     i2l1874:
  3249                           
  3250                           ;Interrup.h: 27: }
  3251                           ;Interrup.h: 28: if(counter == _pwm[1]){
  3252  001050  501F               	movf	_counter,w,c
  3253  001052  6E3A               	movwf	??_pwmExecute& (0+255),c
  3254  001054  6A3B               	clrf	(??_pwmExecute+1)& (0+255),c
  3255  001056  5022               	movf	__pwm+2,w,c
  3256  001058  183A               	xorwf	??_pwmExecute,w,c
  3257  00105A  E106               	bnz	i2l1878
  3258  00105C  5023               	movf	__pwm+3,w,c
  3259  00105E  183B               	xorwf	??_pwmExecute+1,w,c
  3260  001060  A4D8               	btfss	status,2,c
  3261  001062  D002               	goto	i2l1878
  3262                           
  3263                           ;Interrup.h: 29: PORTB &= 0b11110111;
  3264  001064  9681               	bcf	3969,3,c	;volatile
  3265  001066  D000               	goto	i2l1878
  3266  001068                     i2l1878:
  3267                           
  3268                           ;Interrup.h: 30: }
  3269                           ;Interrup.h: 31: if(counter == _pwm[2]){
  3270  001068  501F               	movf	_counter,w,c
  3271  00106A  6E3A               	movwf	??_pwmExecute& (0+255),c
  3272  00106C  6A3B               	clrf	(??_pwmExecute+1)& (0+255),c
  3273  00106E  5024               	movf	__pwm+4,w,c
  3274  001070  183A               	xorwf	??_pwmExecute,w,c
  3275  001072  E106               	bnz	i2l1882
  3276  001074  5025               	movf	__pwm+5,w,c
  3277  001076  183B               	xorwf	??_pwmExecute+1,w,c
  3278  001078  A4D8               	btfss	status,2,c
  3279  00107A  D002               	goto	i2l1882
  3280                           
  3281                           ;Interrup.h: 32: PORTB &= 0b11101111;
  3282  00107C  9881               	bcf	3969,4,c	;volatile
  3283  00107E  D000               	goto	i2l1882
  3284  001080                     i2l1882:
  3285                           
  3286                           ;Interrup.h: 33: }
  3287                           ;Interrup.h: 34: if(counter == _pwm[3]){
  3288  001080  501F               	movf	_counter,w,c
  3289  001082  6E3A               	movwf	??_pwmExecute& (0+255),c
  3290  001084  6A3B               	clrf	(??_pwmExecute+1)& (0+255),c
  3291  001086  5026               	movf	__pwm+6,w,c
  3292  001088  183A               	xorwf	??_pwmExecute,w,c
  3293  00108A  E106               	bnz	i2l1886
  3294  00108C  5027               	movf	__pwm+7,w,c
  3295  00108E  183B               	xorwf	??_pwmExecute+1,w,c
  3296  001090  A4D8               	btfss	status,2,c
  3297  001092  D002               	goto	i2l1886
  3298                           
  3299                           ;Interrup.h: 35: PORTB &= 0b11011111;
  3300  001094  9A81               	bcf	3969,5,c	;volatile
  3301                           
  3302                           ;Interrup.h: 36: }else if(counter == 0){
  3303  001096  D009               	goto	i2l218
  3304  001098                     i2l1886:
  3305  001098  501F               	movf	_counter,w,c
  3306  00109A  A4D8               	btfss	status,2,c
  3307  00109C  D006               	goto	i2l218
  3308                           
  3309                           ;Interrup.h: 37: PORTB |= 0b11111100;
  3310  00109E  0EFC               	movlw	252
  3311  0010A0  1281               	iorwf	3969,f,c	;volatile
  3312                           
  3313                           ;Interrup.h: 39: else if(counter == 256){
  3314                           
  3315                           ;Interrup.h: 38: }
  3316  0010A2  D003               	goto	i2l218
  3317                           
  3318                           ;Interrup.h: 40: counter = 0;
  3319  0010A4  0E00               	movlw	0
  3320  0010A6  6E1F               	movwf	_counter,c
  3321  0010A8  D000               	goto	i2l218
  3322  0010AA                     i2l218:
  3323  0010AA  0012               	return		;funcret
  3324  0010AC                     __end_of_pwmExecute:
  3325                           	opt stack 0
  3326                           pclatu	equ	0xFFB
  3327                           pclath	equ	0xFFA
  3328                           tblptru	equ	0xFF8
  3329                           tblptrh	equ	0xFF7
  3330                           tblptrl	equ	0xFF6
  3331                           tablat	equ	0xFF5
  3332                           prodh	equ	0xFF4
  3333                           prodl	equ	0xFF3
  3334                           intcon	equ	0xFF2
  3335                           indf0	equ	0xFEF
  3336                           postinc0	equ	0xFEE
  3337                           fsr0h	equ	0xFEA
  3338                           fsr0l	equ	0xFE9
  3339                           wreg	equ	0xFE8
  3340                           postdec1	equ	0xFE5
  3341                           fsr1h	equ	0xFE2
  3342                           fsr1l	equ	0xFE1
  3343                           indf2	equ	0xFDF
  3344                           fsr2h	equ	0xFDA
  3345                           fsr2l	equ	0xFD9
  3346                           status	equ	0xFD8
  3347                           
  3348 ;; *************** function _SerialReadUntilToken *****************
  3349 ;; Defined at:
  3350 ;;		line 174 in file "Serial.h"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;  charToCompar    1    wreg     const unsigned char 
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;  charToCompar    1    1[COMRAM] const unsigned char 
  3355 ;;  i               2    2[COMRAM] unsigned int 
  3356 ;; Return value:  Size  Location     Type
  3357 ;;		None               void
  3358 ;; Registers used:
  3359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3360 ;; Tracked objects:
  3361 ;;		On entry : 0/0
  3362 ;;		On exit  : 0/0
  3363 ;;		Unchanged: 0/0
  3364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3365 ;;      Params:         0       0       0       0       0       0       0       0       0
  3366 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3367 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3368 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3369 ;;Total ram usage:        4 bytes
  3370 ;; Hardware stack levels used:    1
  3371 ;; Hardware stack levels required when called:    1
  3372 ;; This function calls:
  3373 ;;		_SerialRead
  3374 ;; This function is called by:
  3375 ;;		_Interrupt
  3376 ;;		_WifiTCPRead
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           	psect	text15
  3381  0011E2                     __ptext15:
  3382                           	opt stack 0
  3383  0011E2                     _SerialReadUntilToken:
  3384                           	opt stack 25
  3385                           
  3386                           ;incstack = 0
  3387                           ;SerialReadUntilToken@charToCompare stored from wreg
  3388  0011E2  6E3B               	movwf	SerialReadUntilToken@charToCompare,c
  3389                           
  3390                           ;Serial.h: 176: unsigned i = 0;
  3391  0011E4  0E00               	movlw	0
  3392  0011E6  6E3D               	movwf	SerialReadUntilToken@i+1,c
  3393  0011E8  0E00               	movlw	0
  3394  0011EA  6E3C               	movwf	SerialReadUntilToken@i,c
  3395  0011EC  D000               	goto	i2l1860
  3396  0011EE                     i2l1860:
  3397                           
  3398                           ;Serial.h: 178: {
  3399                           ;Serial.h: 179: SerialReceivedString[i] = SerialRead();
  3400  0011EE  0EA9               	movlw	low _SerialReceivedString
  3401  0011F0  243C               	addwf	SerialReadUntilToken@i,w,c
  3402  0011F2  6ED9               	movwf	fsr2l,c
  3403  0011F4  0E00               	movlw	high _SerialReceivedString
  3404  0011F6  203D               	addwfc	SerialReadUntilToken@i+1,w,c
  3405  0011F8  6EDA               	movwf	fsr2h,c
  3406  0011FA  EC85  F009         	call	_SerialRead	;wreg free
  3407  0011FE  6EDF               	movwf	indf2,c
  3408                           
  3409                           ;Serial.h: 180: if( charToCompare == SerialReceivedString[i])
  3410  001200  0EA9               	movlw	low _SerialReceivedString
  3411  001202  243C               	addwf	SerialReadUntilToken@i,w,c
  3412  001204  6ED9               	movwf	fsr2l,c
  3413  001206  0E00               	movlw	high _SerialReceivedString
  3414  001208  203D               	addwfc	SerialReadUntilToken@i+1,w,c
  3415  00120A  6EDA               	movwf	fsr2h,c
  3416  00120C  503B               	movf	SerialReadUntilToken@charToCompare,w,c
  3417  00120E  18DE               	xorwf	postinc2,w,c
  3418  001210  A4D8               	btfss	status,2,c
  3419  001212  D009               	goto	i2l1866
  3420                           
  3421                           ;Serial.h: 181: {
  3422                           ;Serial.h: 182: SerialReceivedString[i] = '\0';
  3423  001214  0EA9               	movlw	low _SerialReceivedString
  3424  001216  243C               	addwf	SerialReadUntilToken@i,w,c
  3425  001218  6ED9               	movwf	fsr2l,c
  3426  00121A  0E00               	movlw	high _SerialReceivedString
  3427  00121C  203D               	addwfc	SerialReadUntilToken@i+1,w,c
  3428  00121E  6EDA               	movwf	fsr2h,c
  3429  001220  0E00               	movlw	0
  3430  001222  6EDF               	movwf	indf2,c
  3431                           
  3432                           ;Serial.h: 183: break;
  3433  001224  D003               	goto	i2l192
  3434  001226                     i2l1866:
  3435                           
  3436                           ;Serial.h: 184: }
  3437                           ;Serial.h: 185: ++i;
  3438  001226  4A3C               	infsnz	SerialReadUntilToken@i,f,c
  3439  001228  2A3D               	incf	SerialReadUntilToken@i+1,f,c
  3440  00122A  D7E1               	goto	i2l1860
  3441  00122C                     i2l192:
  3442                           
  3443                           ;Serial.h: 186: }
  3444                           ;Serial.h: 187: SerialLen = i;
  3445  00122C  C03C  F031         	movff	SerialReadUntilToken@i,_SerialLen
  3446  001230  C03D  F032         	movff	SerialReadUntilToken@i+1,_SerialLen+1
  3447                           
  3448                           ;Serial.h: 188: return;
  3449  001234  0012               	return		;funcret
  3450  001236                     __end_of_SerialReadUntilToken:
  3451                           	opt stack 0
  3452                           pclatu	equ	0xFFB
  3453                           pclath	equ	0xFFA
  3454                           tblptru	equ	0xFF8
  3455                           tblptrh	equ	0xFF7
  3456                           tblptrl	equ	0xFF6
  3457                           tablat	equ	0xFF5
  3458                           prodh	equ	0xFF4
  3459                           prodl	equ	0xFF3
  3460                           intcon	equ	0xFF2
  3461                           indf0	equ	0xFEF
  3462                           postinc0	equ	0xFEE
  3463                           fsr0h	equ	0xFEA
  3464                           fsr0l	equ	0xFE9
  3465                           wreg	equ	0xFE8
  3466                           postdec1	equ	0xFE5
  3467                           fsr1h	equ	0xFE2
  3468                           fsr1l	equ	0xFE1
  3469                           indf2	equ	0xFDF
  3470                           postinc2	equ	0xFDE
  3471                           fsr2h	equ	0xFDA
  3472                           fsr2l	equ	0xFD9
  3473                           status	equ	0xFD8
  3474                           
  3475 ;; *************** function _SerialRead *****************
  3476 ;; Defined at:
  3477 ;;		line 110 in file "Serial.h"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;		None
  3480 ;; Auto vars:     Size  Location     Type
  3481 ;;		None
  3482 ;; Return value:  Size  Location     Type
  3483 ;;                  1    wreg      unsigned char 
  3484 ;; Registers used:
  3485 ;;		wreg, status,2
  3486 ;; Tracked objects:
  3487 ;;		On entry : 0/0
  3488 ;;		On exit  : 0/0
  3489 ;;		Unchanged: 0/0
  3490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3491 ;;      Params:         0       0       0       0       0       0       0       0       0
  3492 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3493 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3494 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3495 ;;Total ram usage:        0 bytes
  3496 ;; Hardware stack levels used:    1
  3497 ;; This function calls:
  3498 ;;		Nothing
  3499 ;; This function is called by:
  3500 ;;		_waitToken
  3501 ;;		_SerialReadUntilToken
  3502 ;;		_SerialReadString
  3503 ;;		_SerialReceiveNChar
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           	psect	text16
  3508  00130A                     __ptext16:
  3509                           	opt stack 0
  3510  00130A                     _SerialRead:
  3511                           	opt stack 25
  3512                           
  3513                           ;Serial.h: 112: if(OERR)
  3514                           
  3515                           ;incstack = 0
  3516  00130A  A2AB               	btfss	4011,1,c	;volatile
  3517  00130C  D003               	goto	i2l159
  3518                           
  3519                           ;Serial.h: 113: {
  3520                           ;Serial.h: 114: CREN = 0;
  3521  00130E  98AB               	bcf	4011,4,c	;volatile
  3522                           
  3523                           ;Serial.h: 115: CREN = 1;
  3524  001310  88AB               	bsf	4011,4,c	;volatile
  3525                           
  3526                           ;Serial.h: 116: }
  3527                           ;Serial.h: 117: while(!RCIF);
  3528  001312  D000               	goto	i2l159
  3529  001314                     i2l159:
  3530  001314  AA9E               	btfss	3998,5,c	;volatile
  3531  001316  D7FE               	goto	i2l159
  3532                           
  3533                           ;Serial.h: 118: SerialReceivedData = RCREG;
  3534  001318  CFAE F01E          	movff	4014,_SerialReceivedData	;volatile
  3535                           
  3536                           ;Serial.h: 119: RCIF = 0;
  3537  00131C  9A9E               	bcf	3998,5,c	;volatile
  3538                           
  3539                           ;Serial.h: 120: return RCREG;
  3540  00131E  50AE               	movf	4014,w,c	;volatile
  3541  001320  D000               	goto	i2l162
  3542  001322                     i2l162:
  3543  001322  0012               	return		;funcret
  3544  001324                     __end_of_SerialRead:
  3545                           	opt stack 0
  3546                           pclatu	equ	0xFFB
  3547                           pclath	equ	0xFFA
  3548                           tblptru	equ	0xFF8
  3549                           tblptrh	equ	0xFF7
  3550                           tblptrl	equ	0xFF6
  3551                           tablat	equ	0xFF5
  3552                           prodh	equ	0xFF4
  3553                           prodl	equ	0xFF3
  3554                           intcon	equ	0xFF2
  3555                           indf0	equ	0xFEF
  3556                           postinc0	equ	0xFEE
  3557                           fsr0h	equ	0xFEA
  3558                           fsr0l	equ	0xFE9
  3559                           wreg	equ	0xFE8
  3560                           postdec1	equ	0xFE5
  3561                           fsr1h	equ	0xFE2
  3562                           fsr1l	equ	0xFE1
  3563                           indf2	equ	0xFDF
  3564                           postinc2	equ	0xFDE
  3565                           fsr2h	equ	0xFDA
  3566                           fsr2l	equ	0xFD9
  3567                           status	equ	0xFD8
  3568                           pclatu	equ	0xFFB
  3569                           pclath	equ	0xFFA
  3570                           tblptru	equ	0xFF8
  3571                           tblptrh	equ	0xFF7
  3572                           tblptrl	equ	0xFF6
  3573                           tablat	equ	0xFF5
  3574                           prodh	equ	0xFF4
  3575                           prodl	equ	0xFF3
  3576                           intcon	equ	0xFF2
  3577                           indf0	equ	0xFEF
  3578                           postinc0	equ	0xFEE
  3579                           fsr0h	equ	0xFEA
  3580                           fsr0l	equ	0xFE9
  3581                           wreg	equ	0xFE8
  3582                           postdec1	equ	0xFE5
  3583                           fsr1h	equ	0xFE2
  3584                           fsr1l	equ	0xFE1
  3585                           indf2	equ	0xFDF
  3586                           postinc2	equ	0xFDE
  3587                           fsr2h	equ	0xFDA
  3588                           fsr2l	equ	0xFD9
  3589                           status	equ	0xFD8
  3590                           
  3591                           	psect	rparam
  3592  0000                     pclatu	equ	0xFFB
  3593                           pclath	equ	0xFFA
  3594                           tblptru	equ	0xFF8
  3595                           tblptrh	equ	0xFF7
  3596                           tblptrl	equ	0xFF6
  3597                           tablat	equ	0xFF5
  3598                           prodh	equ	0xFF4
  3599                           prodl	equ	0xFF3
  3600                           intcon	equ	0xFF2
  3601                           indf0	equ	0xFEF
  3602                           postinc0	equ	0xFEE
  3603                           fsr0h	equ	0xFEA
  3604                           fsr0l	equ	0xFE9
  3605                           wreg	equ	0xFE8
  3606                           postdec1	equ	0xFE5
  3607                           fsr1h	equ	0xFE2
  3608                           fsr1l	equ	0xFE1
  3609                           indf2	equ	0xFDF
  3610                           postinc2	equ	0xFDE
  3611                           fsr2h	equ	0xFDA
  3612                           fsr2l	equ	0xFD9
  3613                           status	equ	0xFD8


Data Sizes:
    Strings     173
    Constant    24
    Data        36
    BSS         374
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     20      77
    BANK0           160     16     152
    BANK1           256      0     220
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sp__strchr	PTR unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), SerialReceivedString(BANK0[50]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_11(CODE[4]), STR_10(CODE[5]), PicConfig@charSend(COMRAM[4]), PicConfig@OkSend(COMRAM[5]), 
		 -> STR_9(CODE[3]), sendCmd(CODE[19]), STR_8(CODE[3]), STR_7(CODE[12]), 
		 -> STR_6(CODE[14]), WifiTCPSend@newLine(COMRAM[3]), STR_5(CODE[22]), STR_4(CODE[14]), 
		 -> STR_3(CODE[36]), STR_2(CODE[14]), STR_1(CODE[9]), SerialReceivedString(BANK0[50]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 50
		 -> STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_11(CODE[4]), STR_10(CODE[5]), PicConfig@charSend(COMRAM[4]), PicConfig@OkSend(COMRAM[5]), 
		 -> STR_9(CODE[3]), sendCmd(CODE[19]), STR_8(CODE[3]), STR_7(CODE[12]), 
		 -> STR_6(CODE[14]), WifiTCPSend@newLine(COMRAM[3]), STR_5(CODE[22]), STR_4(CODE[14]), 
		 -> STR_3(CODE[36]), STR_2(CODE[14]), STR_1(CODE[9]), SerialReceivedString(BANK0[50]), 

    sp__intToString	PTR unsigned char  size(2) Largest target is 2
		 -> intToString@Ret_548(COMRAM[2]), intToString@Ret(COMRAM[1]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), SerialReceivedString(BANK0[50]), 

    SerialWrite@frase	PTR const unsigned char  size(2) Largest target is 36
		 -> PicConfig@charSend(COMRAM[4]), PicConfig@OkSend(COMRAM[5]), STR_9(CODE[3]), sendCmd(CODE[19]), 
		 -> STR_6(CODE[14]), WifiTCPSend@newLine(COMRAM[3]), STR_5(CODE[22]), STR_4(CODE[14]), 
		 -> STR_3(CODE[36]), STR_2(CODE[14]), STR_1(CODE[9]), 

    SerialWifiWrite@Valor	PTR unsigned char  size(2) Largest target is 220
		 -> valoresEnviar(BANK1[220]), 


Critical Paths under _main in COMRAM

    _SerialWifiWrite->_SerialPrint
    _WifiTCPinit->_delaySeg
    _SerialWrite->_strlen

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_SerialReadUntilToken

Critical Paths under _main in BANK0

    _main->_lerValores
    _lerValores->_SerialWrite
    _WifiTCPinit->_SerialWrite
    _SerialWrite->_strlen

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Interrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Interrupt in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4522
                        _WifiTCPinit
                            _initADC
                            _initPWM
                           _initUART
                         _lerValores
 ---------------------------------------------------------------------------------
 (1) _lerValores                                           6     6      0    2554
                                             10 BANK0      6     6      0
                    _SerialWifiWrite
                        _SerialWrite
                           _StartADC
 ---------------------------------------------------------------------------------
 (2) _StartADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SerialWifiWrite                                      6     2      4     291
                                              0 BANK0      6     2      4
                        _SerialPrint
 ---------------------------------------------------------------------------------
 (1) _initUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WifiTCPinit                                          0     0      0    1968
                        _SerialWrite
                           _delaySeg
 ---------------------------------------------------------------------------------
 (2) _delaySeg                                             7     5      2     461
                                             18 COMRAM     2     0      2
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _SerialWrite                                          6     4      2    1507
                                              4 BANK0      6     4      2
                        _SerialPrint
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     504
                                             18 COMRAM     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _SerialPrint                                          1     1      0      31
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Interrupt                                           14    14      0     156
                                              4 COMRAM    14    14      0
               _SerialReadUntilToken
                         _pwmExecute
                          _waitToken
 ---------------------------------------------------------------------------------
 (5) _waitToken                                            1     1      0      44
                                              0 COMRAM     1     1      0
                         _SerialRead
 ---------------------------------------------------------------------------------
 (5) _pwmExecute                                           2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (5) _SerialReadUntilToken                                 4     4      0     112
                                              0 COMRAM     4     4      0
                         _SerialRead
 ---------------------------------------------------------------------------------
 (6) _SerialRead                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _WifiTCPinit
     _SerialWrite
       _SerialPrint
       _strlen
     _delaySeg
   _initADC
   _initPWM
   _initUART
   _lerValores
     _SerialWifiWrite
       _SerialPrint
     _SerialWrite
       _SerialPrint
       _strlen
     _StartADC

 _Interrupt (ROOT)
   _SerialReadUntilToken
     _SerialRead
   _pwmExecute
   _waitToken
     _SerialRead

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      DC       7       85.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      98       5       95.0%
BITCOMRAM           5F      0       3       0        3.2%
COMRAM              5F     14      4D       1       81.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C1      20        0.0%
DATA                 0      0     1C1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu May 19 15:17:19 2016

                                _i 00A1                                  _j 00A5  
                ??_SerialWifiWrite 004D                                 _A0 01B8  
                               _A1 01B9                                 _B0 01C0  
                               _A2 01BA                                 _B1 01C1  
                               _A3 01BB                                 _B2 01C2  
                               _A4 01BC                                 _B3 01C3  
                               _A5 01BD                                 _B4 01C4  
                               _A6 01BE                                 _B5 01C5  
                               _A7 01BF                                 _B6 01C6  
                               _B7 01C7                                l141 134E  
                              l135 12AC                                l138 1340  
                              l154 0F1A                                l350 0CD0  
                              l263 0FB0                                _ADC 0001  
                              l280 1308                                l283 0FBC  
                              l292 100A                                l286 0FD6  
                              l295 1024                                l289 0FF0  
                              _TA0 01C9                                _TA1 01CA  
                              _PR2 000FCB                                _RX9 007D5E  
                              _TX9 007D66                                wreg 000FE8  
                     __CFG_LVP$OFF 000000                       __CFG_WDT$OFF 000000  
                             l1062 1180                               l2306 112A  
                             l2330 118E                               l2308 1132  
                             l2340 11C8                               l2332 1198  
                             l2420 0902                               l2342 11D0  
                             l2350 1264                               l2336 11AC  
                             l2362 0F0E                               l2346 1242  
                             l2356 0E86                               l2456 0AEA  
                             l2448 0ABC                               l2632 12E4  
                             l2484 0CA4                               STR_1 08A5  
                             STR_2 086F                               STR_3 0835  
                             STR_4 087D                               STR_5 0859  
                             STR_6 088B                               STR_7 0899  
                             STR_8 08DF                               STR_9 0856  
                             _BRGH 007D62                               _CREN 007D5C  
                             _FERR 007D5A                               u2107 090A  
                             _CSRC 007D67                               u2117 0AF2  
                             u2127 11B4                               u1720 0EC0  
                             u1650 1152                               u1740 0F00  
                             u1727 0EB6                               u1840 0900  
                             u1657 1148                               u1747 0EF6  
                             u1860 0AE8                               _RCIE 007CED  
                             _RCIF 007CF5                               _OERR 007D59  
                             _RX9D 007D58                               _SPEN 007D5F  
                             _TX9D 007D60                               _SREN 007D5D  
                             _TRMT 007D61                               _TXIE 007CEC  
                             _TXIF 007CF4                               _TXEN 007D65  
                             _SYNC 007D64                       __CFG_PWRT$ON 000000  
                             __pwm 0020                               _main 12D0  
                             _freq 0035                               fsr0h 000FEA  
                             fsr1h 000FE2                               indf0 000FEF  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               pclat 000FFA  
                             prodh 000FF4                               prodl 000FF3  
                             start 0818                         _FlagTXSend 01C8  
           ??_SerialReadUntilToken 003A                      __CFG_MCLRE$ON 000000  
                     ___param_bank 000010                      __CFG_PLLDIV$5 000000  
                            _ADDEN 007D5B                              ?_main 003A  
                            STR_10 08AE                              STR_11 08DB  
                            STR_12 08B3                              STR_13 08BD  
                            STR_14 08C2                              STR_15 08C7  
                            STR_16 08D6                              STR_17 08B8  
                            STR_18 08CC                              STR_19 08D1  
                            _T0CON 000FD5                              _T2CON 000FCA  
                            i2l230 0DA4                              i2l231 0DB6  
                            i2l224 0D38                              i2l225 0D4A  
                            i2l162 1322                              i2l218 10AA  
                            i2l226 0D5C                              i2l227 0D6E  
                            i2l235 0E32                              i2l228 0D80  
                            i2l229 0D92                              i2l159 1314  
                            i2l192 122C                              i2l179 12CE  
                            _RCREG 000FAE                              _SENDB 007D63  
                            _TMR0L 000FD6                              _SPBRG 000FAF  
                            _PORTA 000F80                              _PORTB 000F81  
                    __CFG_USBDIV$2 000000                              _TRISA 000F92  
                            _TRISB 000F93                              _TXREG 000FAD  
               SerialWrite@tamanho 00E3                    __end_of_initADC 130A  
                            _delay 001C                    __end_of_initPWM 1362  
                  __end_of_sendCmd 0835                     __pbitbssCOMRAM 01B8  
                            tablat 000FF5               _SerialReceivedString 00A9  
                            status 000FD8                        lerValores@i 00E7  
                      lerValores@j 00E9                    __initialization 10AC  
                     __end_of_main 12EE                             ??_main 004E  
                    __activetblptr 000002                   __end_of_StartADC 1036  
                 SerialWifiWrite@i 00DF                             _ADCON0 000FC2  
                           _ADCON1 000FC1                             _ADCON2 000FC0  
                           _ADRESH 000FC4                             _ADRESL 000FC3  
                           _CCPR1L 000FBE                             i2l2050 0D10  
                           i2l2082 0E06                             i2l2078 0DDA  
                           i2l1860 11EE                             i2l1844 12B8  
                           i2l1854 12CA                             i2l1866 1226  
                           i2l1882 1080                             i2l1874 1050  
                           i2l1886 1098                             i2l1878 1068  
                           _INTCON 000FF2                             _SPBRGH 000FB0  
                           _SSPADD 000FC8                      ??_SerialPrint 004C  
                    ??_SerialWrite 00E1                   __end_of_delaySeg 11E2  
                   _WifiTCPDataLen 0033                         _SerialRead 130A  
                           _Oksend 081D                             _Result 001A  
               __size_of_Interrupt 0664                      ??_WifiTCPinit 004E  
                 __end_of_initUART 12AE                             clear_0 10B2  
                           clear_1 10BE                             clear_2 10D0  
                           _strlen 1120                          ??_initADC 004C  
                        ??_initPWM 004C                       __pdataCOMRAM 0020  
                     __mediumconst 0000                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
                       __accesstop 0060            __end_of__initialization 1116  
                  __CFG_PBADEN$OFF 000000                    _SerialWifiWrite 1236  
                    ___rparam_used 000001                     __pcstackCOMRAM 003A  
                     __pidataBANK0 1362                   SerialWrite@frase 00DF  
              __end_of_SerialPrint 1350                __end_of_SerialWrite 0F22  
              __end_of_WifiTCPinit 0FB2                  __end_of_Interrupt 0E6C  
                       __pbssBANK0 0060                         __pbssBANK1 0100  
                      ?_SerialRead 003A                          ?_StartADC 003A  
                          _CCP1CON 000FBD                            ?_strlen 004C  
               __size_of_waitToken 0022                          ?_delaySeg 004C  
          __end_of_SerialWifiWrite 127A                            _SSPCON1 000FC6  
                          _SSPCON2 000FC5                            _SSPSTAT 000FC7  
                        ?_initUART 003A                        _SerialPrint 133C  
                       _lerValores 08E4                        _SerialWrite 0E6C  
                          __Hparam 0000                            __Lparam 0000  
                      _WifiTCPData 0092                        _WifiTCPinit 0F22  
    __size_of_SerialReadUntilToken 0054                         ??_StartADC 004C  
                     __psmallconst 081C                            __pcinit 10AC  
                          __ramtop 0800                            __ptext0 12D0  
                          __ptext1 08E4                            __ptext2 0FB2  
                          __ptext3 1236                            __ptext4 127A  
                          __ptext5 1350                            __ptext6 12EE  
                          __ptext7 0F22                            __ptext8 1182  
                          __ptext9 0E6C                            _initADC 12EE  
                  __size_of_strlen 0062                            _initPWM 1350  
                          _counter 001F                            _sendCmd 0822  
                       ??_delaySeg 00DB                __size_of_SerialRead 001A  
                   __pintcode_body 0CD2               end_of_initialization 1116  
                       ??_initUART 004C                      __Lmediumconst 0000  
                          int_func 0CD2                  __end_of_waitToken 12D0  
                 _SerialSendString 0060                            postdec1 000FE5  
                          postinc0 000FEE                            postinc2 000FDE  
                          strlen@s 004C                         _pwmExecute 1036  
                   PicConfig@F5251 00EB                     PicConfig@F5253 002A  
                   PicConfig@F5255 00F0                     PicConfig@F5257 00F4  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                 ?_SerialWifiWrite 00DB                        ?_lerValores 003A  
                   __end_of_Oksend 0822                  SerialWrite@indice 00E4  
                    __pidataCOMRAM 1324                     __end_of_strlen 1182  
              start_initialization 10AC                    SerialPrint@byte 004C  
                        _Interrupt 0808                       ??_SerialRead 003A  
                        _SerialLen 0031                          _PortaSend 0018  
                      __pdataBANK0 00EB                        ?_pwmExecute 003A  
                __size_of_StartADC 0084                           ??_strlen 00DB  
              __size_of_lerValores 03EE                        __pbssCOMRAM 0001  
            SerialReadUntilToken@i 003C                      __pcstackBANK0 00DB  
               __end_of_SerialRead 1324                     waitToken@value 003A  
                __size_of_delaySeg 0060                         ?_Interrupt 003A  
                     ?_SerialPrint 003A                  __size_of_initUART 0034  
                     ?_SerialWrite 00DF                          __pintcode 0808  
                     ?_WifiTCPinit 003A                           ?_initADC 003A  
                         ?_initPWM 003A                        __smallconst 081C  
     __end_of_SerialReadUntilToken 1236                          delaySeg@i 00DE  
                        delaySeg@j 00DC                __size_of_pwmExecute 0076  
                         _PIE1bits 000F9D                           _PIR1bits 000F9E  
                        _waitToken 12AE               SerialWifiWrite@Valor 00DB  
                       _ADCON0bits 000FC2                         _ADCON1bits 000FC1  
                 delaySeg@waitTime 004C                          copy_data0 10EA  
                        copy_data1 110A                 _SerialReceivedData 001E  
                      ??_Interrupt 003E                       ??_lerValores 00E5  
                         __Hrparam 0000                           __Lrparam 0000  
                       ?_waitToken 003A                           _StartADC 0FB2  
                    _valoresEnviar 0100                   WifiTCPSend@F5114 002E  
                 __size_of_initADC 001C                   __size_of_initPWM 0012  
                         _delaySeg 1182                 __end_of_lerValores 0CD2  
                         _flagData 01CB                           _flagLink 01CC  
                         __ptext10 1120                           __ptext11 133C  
                         __ptext13 12AE                           __ptext14 1036  
                         __ptext15 11E2                           __ptext16 130A  
SerialReadUntilToken@charToCompare 003B                           _initUART 127A  
                    __size_of_main 001E           __size_of_SerialWifiWrite 0044  
             __size_of_SerialPrint 0014               __size_of_SerialWrite 00B6  
             _SerialReadUntilToken 11E2                       ??_pwmExecute 003A  
             __size_of_WifiTCPinit 0090                           _voltagem 0015  
            __CFG_CPUDIV$OSC1_PLL2 000000                         _INTCONbits 000FF2  
                         intlevel2 0000                 __end_of_pwmExecute 10AC  
                      ??_waitToken 003A              ?_SerialReadUntilToken 003A  
           SerialWifiWrite@Tamanho 00DD                           strlen@cp 00DD  
                      _SSPCON2bits 000FC5                 __CFG_FOSC$HSPLL_HS 000000  
